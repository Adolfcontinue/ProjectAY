// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto
#pragma warning(disable: 4125)
#pragma warning(disable: 4668)
#pragma warning(disable: 4577)


#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class MonsterData;
struct MonsterDataDefaultTypeInternal;
extern MonsterDataDefaultTypeInternal _MonsterData_default_instance_;
class UserData;
struct UserDataDefaultTypeInternal;
extern UserDataDefaultTypeInternal _UserData_default_instance_;
class Vector;
struct VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::MonsterData* Arena::CreateMaybeMessage<::Protocol::MonsterData>(Arena*);
template<> ::Protocol::UserData* Arena::CreateMaybeMessage<::Protocol::UserData>(Arena*);
template<> ::Protocol::Vector* Arena::CreateMaybeMessage<::Protocol::Vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Vector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Vector) */ {
 public:
  inline Vector() : Vector(nullptr) {}
  ~Vector() override;
  explicit constexpr Vector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector(const Vector& from);
  Vector(Vector&& from) noexcept
    : Vector() {
    *this = ::std::move(from);
  }

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector& operator=(Vector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
               &_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector& a, Vector& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector* New() const final {
    return new Vector();
  }

  Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector& from);
  void MergeFrom(const Vector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Vector";
  }
  protected:
  explicit Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class UserData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.UserData) */ {
 public:
  inline UserData() : UserData(nullptr) {}
  ~UserData() override;
  explicit constexpr UserData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserData(const UserData& from);
  UserData(UserData&& from) noexcept
    : UserData() {
    *this = ::std::move(from);
  }

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserData& operator=(UserData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserData* internal_default_instance() {
    return reinterpret_cast<const UserData*>(
               &_UserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserData& a, UserData& b) {
    a.Swap(&b);
  }
  inline void Swap(UserData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserData* New() const final {
    return new UserData();
  }

  UserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserData& from);
  void MergeFrom(const UserData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.UserData";
  }
  protected:
  explicit UserData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 3,
    kRotFieldNumber = 4,
    kSessionKeyFieldNumber = 1,
    kUserKeyFieldNumber = 2,
  };
  // .Protocol.Vector pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Protocol::Vector& pos() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Vector* release_pos();
  ::Protocol::Vector* mutable_pos();
  void set_allocated_pos(::Protocol::Vector* pos);
  private:
  const ::Protocol::Vector& _internal_pos() const;
  ::Protocol::Vector* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Protocol::Vector* pos);
  ::Protocol::Vector* unsafe_arena_release_pos();

  // .Protocol.Vector Rot = 4;
  bool has_rot() const;
  private:
  bool _internal_has_rot() const;
  public:
  void clear_rot();
  const ::Protocol::Vector& rot() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Vector* release_rot();
  ::Protocol::Vector* mutable_rot();
  void set_allocated_rot(::Protocol::Vector* rot);
  private:
  const ::Protocol::Vector& _internal_rot() const;
  ::Protocol::Vector* _internal_mutable_rot();
  public:
  void unsafe_arena_set_allocated_rot(
      ::Protocol::Vector* rot);
  ::Protocol::Vector* unsafe_arena_release_rot();

  // uint64 sessionKey = 1;
  void clear_sessionkey();
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionkey() const;
  void set_sessionkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sessionkey() const;
  void _internal_set_sessionkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 userKey = 2;
  void clear_userkey();
  ::PROTOBUF_NAMESPACE_ID::uint64 userkey() const;
  void set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userkey() const;
  void _internal_set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.UserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Vector* pos_;
  ::Protocol::Vector* rot_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionkey_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class MonsterData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.MonsterData) */ {
 public:
  inline MonsterData() : MonsterData(nullptr) {}
  ~MonsterData() override;
  explicit constexpr MonsterData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonsterData(const MonsterData& from);
  MonsterData(MonsterData&& from) noexcept
    : MonsterData() {
    *this = ::std::move(from);
  }

  inline MonsterData& operator=(const MonsterData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonsterData& operator=(MonsterData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonsterData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonsterData* internal_default_instance() {
    return reinterpret_cast<const MonsterData*>(
               &_MonsterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MonsterData& a, MonsterData& b) {
    a.Swap(&b);
  }
  inline void Swap(MonsterData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonsterData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonsterData* New() const final {
    return new MonsterData();
  }

  MonsterData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonsterData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonsterData& from);
  void MergeFrom(const MonsterData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonsterData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.MonsterData";
  }
  protected:
  explicit MonsterData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 3,
    kRotFieldNumber = 4,
    kMonsterKeyFieldNumber = 1,
    kHpFieldNumber = 2,
  };
  // .Protocol.Vector pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Protocol::Vector& pos() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Vector* release_pos();
  ::Protocol::Vector* mutable_pos();
  void set_allocated_pos(::Protocol::Vector* pos);
  private:
  const ::Protocol::Vector& _internal_pos() const;
  ::Protocol::Vector* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Protocol::Vector* pos);
  ::Protocol::Vector* unsafe_arena_release_pos();

  // .Protocol.Vector Rot = 4;
  bool has_rot() const;
  private:
  bool _internal_has_rot() const;
  public:
  void clear_rot();
  const ::Protocol::Vector& rot() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Vector* release_rot();
  ::Protocol::Vector* mutable_rot();
  void set_allocated_rot(::Protocol::Vector* rot);
  private:
  const ::Protocol::Vector& _internal_rot() const;
  ::Protocol::Vector* _internal_mutable_rot();
  public:
  void unsafe_arena_set_allocated_rot(
      ::Protocol::Vector* rot);
  ::Protocol::Vector* unsafe_arena_release_rot();

  // uint64 monsterKey = 1;
  void clear_monsterkey();
  ::PROTOBUF_NAMESPACE_ID::uint64 monsterkey() const;
  void set_monsterkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_monsterkey() const;
  void _internal_set_monsterkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 hp = 2;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.MonsterData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Vector* pos_;
  ::Protocol::Vector* rot_;
  ::PROTOBUF_NAMESPACE_ID::uint64 monsterkey_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector

// double x = 1;
inline void Vector::clear_x() {
  x_ = 0;
}
inline double Vector::_internal_x() const {
  return x_;
}
inline double Vector::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector.x)
  return _internal_x();
}
inline void Vector::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vector::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector.x)
}

// double y = 2;
inline void Vector::clear_y() {
  y_ = 0;
}
inline double Vector::_internal_y() const {
  return y_;
}
inline double Vector::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector.y)
  return _internal_y();
}
inline void Vector::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vector::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector.y)
}

// double z = 3;
inline void Vector::clear_z() {
  z_ = 0;
}
inline double Vector::_internal_z() const {
  return z_;
}
inline double Vector::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector.z)
  return _internal_z();
}
inline void Vector::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Vector::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector.z)
}

// -------------------------------------------------------------------

// UserData

// uint64 sessionKey = 1;
inline void UserData::clear_sessionkey() {
  sessionkey_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserData::_internal_sessionkey() const {
  return sessionkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserData::sessionkey() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.sessionKey)
  return _internal_sessionkey();
}
inline void UserData::_internal_set_sessionkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sessionkey_ = value;
}
inline void UserData::set_sessionkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sessionkey(value);
  // @@protoc_insertion_point(field_set:Protocol.UserData.sessionKey)
}

// uint64 userKey = 2;
inline void UserData::clear_userkey() {
  userkey_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserData::_internal_userkey() const {
  return userkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserData::userkey() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.userKey)
  return _internal_userkey();
}
inline void UserData::_internal_set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userkey_ = value;
}
inline void UserData::set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userkey(value);
  // @@protoc_insertion_point(field_set:Protocol.UserData.userKey)
}

// .Protocol.Vector pos = 3;
inline bool UserData::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool UserData::has_pos() const {
  return _internal_has_pos();
}
inline void UserData::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::Protocol::Vector& UserData::_internal_pos() const {
  const ::Protocol::Vector* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector&>(
      ::Protocol::_Vector_default_instance_);
}
inline const ::Protocol::Vector& UserData::pos() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.pos)
  return _internal_pos();
}
inline void UserData::unsafe_arena_set_allocated_pos(
    ::Protocol::Vector* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.UserData.pos)
}
inline ::Protocol::Vector* UserData::release_pos() {
  
  ::Protocol::Vector* temp = pos_;
  pos_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Vector* UserData::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.pos)
  
  ::Protocol::Vector* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Protocol::Vector* UserData::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::Protocol::Vector* UserData::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.pos)
  return _internal_mutable_pos();
}
inline void UserData::set_allocated_pos(::Protocol::Vector* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::Vector>::GetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.pos)
}

// .Protocol.Vector Rot = 4;
inline bool UserData::_internal_has_rot() const {
  return this != internal_default_instance() && rot_ != nullptr;
}
inline bool UserData::has_rot() const {
  return _internal_has_rot();
}
inline void UserData::clear_rot() {
  if (GetArenaForAllocation() == nullptr && rot_ != nullptr) {
    delete rot_;
  }
  rot_ = nullptr;
}
inline const ::Protocol::Vector& UserData::_internal_rot() const {
  const ::Protocol::Vector* p = rot_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector&>(
      ::Protocol::_Vector_default_instance_);
}
inline const ::Protocol::Vector& UserData::rot() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.Rot)
  return _internal_rot();
}
inline void UserData::unsafe_arena_set_allocated_rot(
    ::Protocol::Vector* rot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rot_);
  }
  rot_ = rot;
  if (rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.UserData.Rot)
}
inline ::Protocol::Vector* UserData::release_rot() {
  
  ::Protocol::Vector* temp = rot_;
  rot_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Vector* UserData::unsafe_arena_release_rot() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.Rot)
  
  ::Protocol::Vector* temp = rot_;
  rot_ = nullptr;
  return temp;
}
inline ::Protocol::Vector* UserData::_internal_mutable_rot() {
  
  if (rot_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector>(GetArenaForAllocation());
    rot_ = p;
  }
  return rot_;
}
inline ::Protocol::Vector* UserData::mutable_rot() {
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.Rot)
  return _internal_mutable_rot();
}
inline void UserData::set_allocated_rot(::Protocol::Vector* rot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rot_;
  }
  if (rot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::Vector>::GetOwningArena(rot);
    if (message_arena != submessage_arena) {
      rot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rot, submessage_arena);
    }
    
  } else {
    
  }
  rot_ = rot;
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.Rot)
}

// -------------------------------------------------------------------

// MonsterData

// uint64 monsterKey = 1;
inline void MonsterData::clear_monsterkey() {
  monsterkey_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MonsterData::_internal_monsterkey() const {
  return monsterkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MonsterData::monsterkey() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterData.monsterKey)
  return _internal_monsterkey();
}
inline void MonsterData::_internal_set_monsterkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  monsterkey_ = value;
}
inline void MonsterData::set_monsterkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_monsterkey(value);
  // @@protoc_insertion_point(field_set:Protocol.MonsterData.monsterKey)
}

// int32 hp = 2;
inline void MonsterData::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterData::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterData::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterData.hp)
  return _internal_hp();
}
inline void MonsterData::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
}
inline void MonsterData::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.MonsterData.hp)
}

// .Protocol.Vector pos = 3;
inline bool MonsterData::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool MonsterData::has_pos() const {
  return _internal_has_pos();
}
inline void MonsterData::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::Protocol::Vector& MonsterData::_internal_pos() const {
  const ::Protocol::Vector* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector&>(
      ::Protocol::_Vector_default_instance_);
}
inline const ::Protocol::Vector& MonsterData::pos() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterData.pos)
  return _internal_pos();
}
inline void MonsterData::unsafe_arena_set_allocated_pos(
    ::Protocol::Vector* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.MonsterData.pos)
}
inline ::Protocol::Vector* MonsterData::release_pos() {
  
  ::Protocol::Vector* temp = pos_;
  pos_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Vector* MonsterData::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:Protocol.MonsterData.pos)
  
  ::Protocol::Vector* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Protocol::Vector* MonsterData::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::Protocol::Vector* MonsterData::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:Protocol.MonsterData.pos)
  return _internal_mutable_pos();
}
inline void MonsterData::set_allocated_pos(::Protocol::Vector* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::Vector>::GetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.MonsterData.pos)
}

// .Protocol.Vector Rot = 4;
inline bool MonsterData::_internal_has_rot() const {
  return this != internal_default_instance() && rot_ != nullptr;
}
inline bool MonsterData::has_rot() const {
  return _internal_has_rot();
}
inline void MonsterData::clear_rot() {
  if (GetArenaForAllocation() == nullptr && rot_ != nullptr) {
    delete rot_;
  }
  rot_ = nullptr;
}
inline const ::Protocol::Vector& MonsterData::_internal_rot() const {
  const ::Protocol::Vector* p = rot_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector&>(
      ::Protocol::_Vector_default_instance_);
}
inline const ::Protocol::Vector& MonsterData::rot() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterData.Rot)
  return _internal_rot();
}
inline void MonsterData::unsafe_arena_set_allocated_rot(
    ::Protocol::Vector* rot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rot_);
  }
  rot_ = rot;
  if (rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.MonsterData.Rot)
}
inline ::Protocol::Vector* MonsterData::release_rot() {
  
  ::Protocol::Vector* temp = rot_;
  rot_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Vector* MonsterData::unsafe_arena_release_rot() {
  // @@protoc_insertion_point(field_release:Protocol.MonsterData.Rot)
  
  ::Protocol::Vector* temp = rot_;
  rot_ = nullptr;
  return temp;
}
inline ::Protocol::Vector* MonsterData::_internal_mutable_rot() {
  
  if (rot_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector>(GetArenaForAllocation());
    rot_ = p;
  }
  return rot_;
}
inline ::Protocol::Vector* MonsterData::mutable_rot() {
  // @@protoc_insertion_point(field_mutable:Protocol.MonsterData.Rot)
  return _internal_mutable_rot();
}
inline void MonsterData::set_allocated_rot(::Protocol::Vector* rot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rot_;
  }
  if (rot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::Vector>::GetOwningArena(rot);
    if (message_arena != submessage_arena) {
      rot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rot, submessage_arena);
    }
    
  } else {
    
  }
  rot_ = rot;
  // @@protoc_insertion_point(field_set_allocated:Protocol.MonsterData.Rot)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
