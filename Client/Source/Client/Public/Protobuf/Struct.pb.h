// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#pragma warning(disable: 4125)
#pragma warning(disable: 4668)
#pragma warning(disable: 4577)

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class MonsterData;
struct MonsterDataDefaultTypeInternal;
extern MonsterDataDefaultTypeInternal _MonsterData_default_instance_;
class TransFormData;
struct TransFormDataDefaultTypeInternal;
extern TransFormDataDefaultTypeInternal _TransFormData_default_instance_;
class UserData;
struct UserDataDefaultTypeInternal;
extern UserDataDefaultTypeInternal _UserData_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::MonsterData* Arena::CreateMaybeMessage<::Protocol::MonsterData>(Arena*);
template<> ::Protocol::TransFormData* Arena::CreateMaybeMessage<::Protocol::TransFormData>(Arena*);
template<> ::Protocol::UserData* Arena::CreateMaybeMessage<::Protocol::UserData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class TransFormData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.TransFormData) */ {
 public:
  inline TransFormData() : TransFormData(nullptr) {}
  ~TransFormData() override;
  explicit constexpr TransFormData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransFormData(const TransFormData& from);
  TransFormData(TransFormData&& from) noexcept
    : TransFormData() {
    *this = ::std::move(from);
  }

  inline TransFormData& operator=(const TransFormData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransFormData& operator=(TransFormData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransFormData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransFormData* internal_default_instance() {
    return reinterpret_cast<const TransFormData*>(
               &_TransFormData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransFormData& a, TransFormData& b) {
    a.Swap(&b);
  }
  inline void Swap(TransFormData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransFormData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransFormData* New() const final {
    return new TransFormData();
  }

  TransFormData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransFormData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransFormData& from);
  void MergeFrom(const TransFormData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransFormData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.TransFormData";
  }
  protected:
  explicit TransFormData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kYawFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float yaw = 4;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.TransFormData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class UserData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.UserData) */ {
 public:
  inline UserData() : UserData(nullptr) {}
  ~UserData() override;
  explicit constexpr UserData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserData(const UserData& from);
  UserData(UserData&& from) noexcept
    : UserData() {
    *this = ::std::move(from);
  }

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserData& operator=(UserData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserData* internal_default_instance() {
    return reinterpret_cast<const UserData*>(
               &_UserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserData& a, UserData& b) {
    a.Swap(&b);
  }
  inline void Swap(UserData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserData* New() const final {
    return new UserData();
  }

  UserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserData& from);
  void MergeFrom(const UserData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.UserData";
  }
  protected:
  explicit UserData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 3,
    kSessionKeyFieldNumber = 1,
    kUserKeyFieldNumber = 2,
    kStateFieldNumber = 4,
  };
  // .Protocol.TransFormData Transform = 3;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Protocol::TransFormData& transform() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::TransFormData* release_transform();
  ::Protocol::TransFormData* mutable_transform();
  void set_allocated_transform(::Protocol::TransFormData* transform);
  private:
  const ::Protocol::TransFormData& _internal_transform() const;
  ::Protocol::TransFormData* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Protocol::TransFormData* transform);
  ::Protocol::TransFormData* unsafe_arena_release_transform();

  // uint64 sessionKey = 1;
  void clear_sessionkey();
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionkey() const;
  void set_sessionkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sessionkey() const;
  void _internal_set_sessionkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 userKey = 2;
  void clear_userkey();
  ::PROTOBUF_NAMESPACE_ID::uint64 userkey() const;
  void set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userkey() const;
  void _internal_set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .Protocol.ActorState state = 4;
  void clear_state();
  ::Protocol::ActorState state() const;
  void set_state(::Protocol::ActorState value);
  private:
  ::Protocol::ActorState _internal_state() const;
  void _internal_set_state(::Protocol::ActorState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.UserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::TransFormData* transform_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionkey_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userkey_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class MonsterData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.MonsterData) */ {
 public:
  inline MonsterData() : MonsterData(nullptr) {}
  ~MonsterData() override;
  explicit constexpr MonsterData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonsterData(const MonsterData& from);
  MonsterData(MonsterData&& from) noexcept
    : MonsterData() {
    *this = ::std::move(from);
  }

  inline MonsterData& operator=(const MonsterData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonsterData& operator=(MonsterData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonsterData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonsterData* internal_default_instance() {
    return reinterpret_cast<const MonsterData*>(
               &_MonsterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MonsterData& a, MonsterData& b) {
    a.Swap(&b);
  }
  inline void Swap(MonsterData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonsterData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonsterData* New() const final {
    return new MonsterData();
  }

  MonsterData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonsterData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonsterData& from);
  void MergeFrom(const MonsterData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonsterData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.MonsterData";
  }
  protected:
  explicit MonsterData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 3,
    kActorkeyFieldNumber = 1,
    kTypeFieldNumber = 2,
    kStateFieldNumber = 5,
  };
  // .Protocol.TransFormData Transform = 3;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Protocol::TransFormData& transform() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::TransFormData* release_transform();
  ::Protocol::TransFormData* mutable_transform();
  void set_allocated_transform(::Protocol::TransFormData* transform);
  private:
  const ::Protocol::TransFormData& _internal_transform() const;
  ::Protocol::TransFormData* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Protocol::TransFormData* transform);
  ::Protocol::TransFormData* unsafe_arena_release_transform();

  // uint64 actorkey = 1;
  void clear_actorkey();
  ::PROTOBUF_NAMESPACE_ID::uint64 actorkey() const;
  void set_actorkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_actorkey() const;
  void _internal_set_actorkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .Protocol.MonsterType type = 2;
  void clear_type();
  ::Protocol::MonsterType type() const;
  void set_type(::Protocol::MonsterType value);
  private:
  ::Protocol::MonsterType _internal_type() const;
  void _internal_set_type(::Protocol::MonsterType value);
  public:

  // .Protocol.ActorState state = 5;
  void clear_state();
  ::Protocol::ActorState state() const;
  void set_state(::Protocol::ActorState value);
  private:
  ::Protocol::ActorState _internal_state() const;
  void _internal_set_state(::Protocol::ActorState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.MonsterData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::TransFormData* transform_;
  ::PROTOBUF_NAMESPACE_ID::uint64 actorkey_;
  int type_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransFormData

// float x = 1;
inline void TransFormData::clear_x() {
  x_ = 0;
}
inline float TransFormData::_internal_x() const {
  return x_;
}
inline float TransFormData::x() const {
  // @@protoc_insertion_point(field_get:Protocol.TransFormData.x)
  return _internal_x();
}
inline void TransFormData::_internal_set_x(float value) {
  
  x_ = value;
}
inline void TransFormData::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.TransFormData.x)
}

// float y = 2;
inline void TransFormData::clear_y() {
  y_ = 0;
}
inline float TransFormData::_internal_y() const {
  return y_;
}
inline float TransFormData::y() const {
  // @@protoc_insertion_point(field_get:Protocol.TransFormData.y)
  return _internal_y();
}
inline void TransFormData::_internal_set_y(float value) {
  
  y_ = value;
}
inline void TransFormData::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.TransFormData.y)
}

// float z = 3;
inline void TransFormData::clear_z() {
  z_ = 0;
}
inline float TransFormData::_internal_z() const {
  return z_;
}
inline float TransFormData::z() const {
  // @@protoc_insertion_point(field_get:Protocol.TransFormData.z)
  return _internal_z();
}
inline void TransFormData::_internal_set_z(float value) {
  
  z_ = value;
}
inline void TransFormData::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.TransFormData.z)
}

// float yaw = 4;
inline void TransFormData::clear_yaw() {
  yaw_ = 0;
}
inline float TransFormData::_internal_yaw() const {
  return yaw_;
}
inline float TransFormData::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.TransFormData.yaw)
  return _internal_yaw();
}
inline void TransFormData::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void TransFormData::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.TransFormData.yaw)
}

// -------------------------------------------------------------------

// UserData

// uint64 sessionKey = 1;
inline void UserData::clear_sessionkey() {
  sessionkey_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserData::_internal_sessionkey() const {
  return sessionkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserData::sessionkey() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.sessionKey)
  return _internal_sessionkey();
}
inline void UserData::_internal_set_sessionkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sessionkey_ = value;
}
inline void UserData::set_sessionkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sessionkey(value);
  // @@protoc_insertion_point(field_set:Protocol.UserData.sessionKey)
}

// uint64 userKey = 2;
inline void UserData::clear_userkey() {
  userkey_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserData::_internal_userkey() const {
  return userkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserData::userkey() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.userKey)
  return _internal_userkey();
}
inline void UserData::_internal_set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userkey_ = value;
}
inline void UserData::set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userkey(value);
  // @@protoc_insertion_point(field_set:Protocol.UserData.userKey)
}

// .Protocol.TransFormData Transform = 3;
inline bool UserData::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool UserData::has_transform() const {
  return _internal_has_transform();
}
inline void UserData::clear_transform() {
  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
inline const ::Protocol::TransFormData& UserData::_internal_transform() const {
  const ::Protocol::TransFormData* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::TransFormData&>(
      ::Protocol::_TransFormData_default_instance_);
}
inline const ::Protocol::TransFormData& UserData::transform() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.Transform)
  return _internal_transform();
}
inline void UserData::unsafe_arena_set_allocated_transform(
    ::Protocol::TransFormData* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.UserData.Transform)
}
inline ::Protocol::TransFormData* UserData::release_transform() {
  
  ::Protocol::TransFormData* temp = transform_;
  transform_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::TransFormData* UserData::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.Transform)
  
  ::Protocol::TransFormData* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::Protocol::TransFormData* UserData::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::TransFormData>(GetArenaForAllocation());
    transform_ = p;
  }
  return transform_;
}
inline ::Protocol::TransFormData* UserData::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.Transform)
  return _internal_mutable_transform();
}
inline void UserData::set_allocated_transform(::Protocol::TransFormData* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::TransFormData>::GetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.Transform)
}

// .Protocol.ActorState state = 4;
inline void UserData::clear_state() {
  state_ = 0;
}
inline ::Protocol::ActorState UserData::_internal_state() const {
  return static_cast< ::Protocol::ActorState >(state_);
}
inline ::Protocol::ActorState UserData::state() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.state)
  return _internal_state();
}
inline void UserData::_internal_set_state(::Protocol::ActorState value) {
  
  state_ = value;
}
inline void UserData::set_state(::Protocol::ActorState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.UserData.state)
}

// -------------------------------------------------------------------

// MonsterData

// uint64 actorkey = 1;
inline void MonsterData::clear_actorkey() {
  actorkey_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MonsterData::_internal_actorkey() const {
  return actorkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MonsterData::actorkey() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterData.actorkey)
  return _internal_actorkey();
}
inline void MonsterData::_internal_set_actorkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  actorkey_ = value;
}
inline void MonsterData::set_actorkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_actorkey(value);
  // @@protoc_insertion_point(field_set:Protocol.MonsterData.actorkey)
}

// .Protocol.MonsterType type = 2;
inline void MonsterData::clear_type() {
  type_ = 0;
}
inline ::Protocol::MonsterType MonsterData::_internal_type() const {
  return static_cast< ::Protocol::MonsterType >(type_);
}
inline ::Protocol::MonsterType MonsterData::type() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterData.type)
  return _internal_type();
}
inline void MonsterData::_internal_set_type(::Protocol::MonsterType value) {
  
  type_ = value;
}
inline void MonsterData::set_type(::Protocol::MonsterType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Protocol.MonsterData.type)
}

// .Protocol.TransFormData Transform = 3;
inline bool MonsterData::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool MonsterData::has_transform() const {
  return _internal_has_transform();
}
inline void MonsterData::clear_transform() {
  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
inline const ::Protocol::TransFormData& MonsterData::_internal_transform() const {
  const ::Protocol::TransFormData* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::TransFormData&>(
      ::Protocol::_TransFormData_default_instance_);
}
inline const ::Protocol::TransFormData& MonsterData::transform() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterData.Transform)
  return _internal_transform();
}
inline void MonsterData::unsafe_arena_set_allocated_transform(
    ::Protocol::TransFormData* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.MonsterData.Transform)
}
inline ::Protocol::TransFormData* MonsterData::release_transform() {
  
  ::Protocol::TransFormData* temp = transform_;
  transform_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::TransFormData* MonsterData::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:Protocol.MonsterData.Transform)
  
  ::Protocol::TransFormData* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::Protocol::TransFormData* MonsterData::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::TransFormData>(GetArenaForAllocation());
    transform_ = p;
  }
  return transform_;
}
inline ::Protocol::TransFormData* MonsterData::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:Protocol.MonsterData.Transform)
  return _internal_mutable_transform();
}
inline void MonsterData::set_allocated_transform(::Protocol::TransFormData* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::TransFormData>::GetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:Protocol.MonsterData.Transform)
}

// .Protocol.ActorState state = 5;
inline void MonsterData::clear_state() {
  state_ = 0;
}
inline ::Protocol::ActorState MonsterData::_internal_state() const {
  return static_cast< ::Protocol::ActorState >(state_);
}
inline ::Protocol::ActorState MonsterData::state() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterData.state)
  return _internal_state();
}
inline void MonsterData::_internal_set_state(::Protocol::ActorState value) {
  
  state_ = value;
}
inline void MonsterData::set_state(::Protocol::ActorState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.MonsterData.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
