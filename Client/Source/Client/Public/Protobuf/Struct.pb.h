// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#pragma warning(disable: 4125)
#pragma warning(disable: 4668)
#pragma warning(disable: 4577)

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class Float3;
struct Float3DefaultTypeInternal;
extern Float3DefaultTypeInternal _Float3_default_instance_;
class Float4;
struct Float4DefaultTypeInternal;
extern Float4DefaultTypeInternal _Float4_default_instance_;
class MonsterData;
struct MonsterDataDefaultTypeInternal;
extern MonsterDataDefaultTypeInternal _MonsterData_default_instance_;
class PositionData;
struct PositionDataDefaultTypeInternal;
extern PositionDataDefaultTypeInternal _PositionData_default_instance_;
class UserData;
struct UserDataDefaultTypeInternal;
extern UserDataDefaultTypeInternal _UserData_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::Float3* Arena::CreateMaybeMessage<::Protocol::Float3>(Arena*);
template<> ::Protocol::Float4* Arena::CreateMaybeMessage<::Protocol::Float4>(Arena*);
template<> ::Protocol::MonsterData* Arena::CreateMaybeMessage<::Protocol::MonsterData>(Arena*);
template<> ::Protocol::PositionData* Arena::CreateMaybeMessage<::Protocol::PositionData>(Arena*);
template<> ::Protocol::UserData* Arena::CreateMaybeMessage<::Protocol::UserData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Float3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Float3) */ {
 public:
  inline Float3() : Float3(nullptr) {}
  ~Float3() override;
  explicit constexpr Float3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Float3(const Float3& from);
  Float3(Float3&& from) noexcept
    : Float3() {
    *this = ::std::move(from);
  }

  inline Float3& operator=(const Float3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Float3& operator=(Float3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Float3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Float3* internal_default_instance() {
    return reinterpret_cast<const Float3*>(
               &_Float3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Float3& a, Float3& b) {
    a.Swap(&b);
  }
  inline void Swap(Float3* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Float3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Float3* New() const final {
    return new Float3();
  }

  Float3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Float3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Float3& from);
  void MergeFrom(const Float3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Float3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Float3";
  }
  protected:
  explicit Float3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Float3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Float4 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Float4) */ {
 public:
  inline Float4() : Float4(nullptr) {}
  ~Float4() override;
  explicit constexpr Float4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Float4(const Float4& from);
  Float4(Float4&& from) noexcept
    : Float4() {
    *this = ::std::move(from);
  }

  inline Float4& operator=(const Float4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Float4& operator=(Float4&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Float4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Float4* internal_default_instance() {
    return reinterpret_cast<const Float4*>(
               &_Float4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Float4& a, Float4& b) {
    a.Swap(&b);
  }
  inline void Swap(Float4* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Float4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Float4* New() const final {
    return new Float4();
  }

  Float4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Float4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Float4& from);
  void MergeFrom(const Float4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Float4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Float4";
  }
  protected:
  explicit Float4(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double w = 4;
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Float4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  double w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PositionData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PositionData) */ {
 public:
  inline PositionData() : PositionData(nullptr) {}
  ~PositionData() override;
  explicit constexpr PositionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionData(const PositionData& from);
  PositionData(PositionData&& from) noexcept
    : PositionData() {
    *this = ::std::move(from);
  }

  inline PositionData& operator=(const PositionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionData& operator=(PositionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionData* internal_default_instance() {
    return reinterpret_cast<const PositionData*>(
               &_PositionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PositionData& a, PositionData& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionData* New() const final {
    return new PositionData();
  }

  PositionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionData& from);
  void MergeFrom(const PositionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PositionData";
  }
  protected:
  explicit PositionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosisionFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .Protocol.Float3 posision = 1;
  bool has_posision() const;
  private:
  bool _internal_has_posision() const;
  public:
  void clear_posision();
  const ::Protocol::Float3& posision() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Float3* release_posision();
  ::Protocol::Float3* mutable_posision();
  void set_allocated_posision(::Protocol::Float3* posision);
  private:
  const ::Protocol::Float3& _internal_posision() const;
  ::Protocol::Float3* _internal_mutable_posision();
  public:
  void unsafe_arena_set_allocated_posision(
      ::Protocol::Float3* posision);
  ::Protocol::Float3* unsafe_arena_release_posision();

  // .Protocol.Float4 rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Float4& rotation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Float4* release_rotation();
  ::Protocol::Float4* mutable_rotation();
  void set_allocated_rotation(::Protocol::Float4* rotation);
  private:
  const ::Protocol::Float4& _internal_rotation() const;
  ::Protocol::Float4* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Float4* rotation);
  ::Protocol::Float4* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:Protocol.PositionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Float3* posision_;
  ::Protocol::Float4* rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class UserData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.UserData) */ {
 public:
  inline UserData() : UserData(nullptr) {}
  ~UserData() override;
  explicit constexpr UserData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserData(const UserData& from);
  UserData(UserData&& from) noexcept
    : UserData() {
    *this = ::std::move(from);
  }

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserData& operator=(UserData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserData* internal_default_instance() {
    return reinterpret_cast<const UserData*>(
               &_UserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserData& a, UserData& b) {
    a.Swap(&b);
  }
  inline void Swap(UserData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserData* New() const final {
    return new UserData();
  }

  UserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserData& from);
  void MergeFrom(const UserData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.UserData";
  }
  protected:
  explicit UserData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kRotationFieldNumber = 4,
    kSessionKeyFieldNumber = 1,
    kUserKeyFieldNumber = 2,
  };
  // .Protocol.Float3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Float3& position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Float3* release_position();
  ::Protocol::Float3* mutable_position();
  void set_allocated_position(::Protocol::Float3* position);
  private:
  const ::Protocol::Float3& _internal_position() const;
  ::Protocol::Float3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Float3* position);
  ::Protocol::Float3* unsafe_arena_release_position();

  // .Protocol.Float4 rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Float4& rotation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Float4* release_rotation();
  ::Protocol::Float4* mutable_rotation();
  void set_allocated_rotation(::Protocol::Float4* rotation);
  private:
  const ::Protocol::Float4& _internal_rotation() const;
  ::Protocol::Float4* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Float4* rotation);
  ::Protocol::Float4* unsafe_arena_release_rotation();

  // uint64 sessionKey = 1;
  void clear_sessionkey();
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionkey() const;
  void set_sessionkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sessionkey() const;
  void _internal_set_sessionkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 userKey = 2;
  void clear_userkey();
  ::PROTOBUF_NAMESPACE_ID::uint64 userkey() const;
  void set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userkey() const;
  void _internal_set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.UserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Float3* position_;
  ::Protocol::Float4* rotation_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionkey_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class MonsterData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.MonsterData) */ {
 public:
  inline MonsterData() : MonsterData(nullptr) {}
  ~MonsterData() override;
  explicit constexpr MonsterData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonsterData(const MonsterData& from);
  MonsterData(MonsterData&& from) noexcept
    : MonsterData() {
    *this = ::std::move(from);
  }

  inline MonsterData& operator=(const MonsterData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonsterData& operator=(MonsterData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonsterData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonsterData* internal_default_instance() {
    return reinterpret_cast<const MonsterData*>(
               &_MonsterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MonsterData& a, MonsterData& b) {
    a.Swap(&b);
  }
  inline void Swap(MonsterData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonsterData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonsterData* New() const final {
    return new MonsterData();
  }

  MonsterData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonsterData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonsterData& from);
  void MergeFrom(const MonsterData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonsterData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.MonsterData";
  }
  protected:
  explicit MonsterData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 3,
    kRotFieldNumber = 4,
    kMonsterKeyFieldNumber = 1,
    kHpFieldNumber = 2,
  };
  // .Protocol.Float3 pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Protocol::Float3& pos() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Float3* release_pos();
  ::Protocol::Float3* mutable_pos();
  void set_allocated_pos(::Protocol::Float3* pos);
  private:
  const ::Protocol::Float3& _internal_pos() const;
  ::Protocol::Float3* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Protocol::Float3* pos);
  ::Protocol::Float3* unsafe_arena_release_pos();

  // .Protocol.Float4 Rot = 4;
  bool has_rot() const;
  private:
  bool _internal_has_rot() const;
  public:
  void clear_rot();
  const ::Protocol::Float4& rot() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Float4* release_rot();
  ::Protocol::Float4* mutable_rot();
  void set_allocated_rot(::Protocol::Float4* rot);
  private:
  const ::Protocol::Float4& _internal_rot() const;
  ::Protocol::Float4* _internal_mutable_rot();
  public:
  void unsafe_arena_set_allocated_rot(
      ::Protocol::Float4* rot);
  ::Protocol::Float4* unsafe_arena_release_rot();

  // uint64 monsterKey = 1;
  void clear_monsterkey();
  ::PROTOBUF_NAMESPACE_ID::uint64 monsterkey() const;
  void set_monsterkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_monsterkey() const;
  void _internal_set_monsterkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 hp = 2;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.MonsterData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Float3* pos_;
  ::Protocol::Float4* rot_;
  ::PROTOBUF_NAMESPACE_ID::uint64 monsterkey_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Float3

// double x = 1;
inline void Float3::clear_x() {
  x_ = 0;
}
inline double Float3::_internal_x() const {
  return x_;
}
inline double Float3::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Float3.x)
  return _internal_x();
}
inline void Float3::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Float3::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Float3.x)
}

// double y = 2;
inline void Float3::clear_y() {
  y_ = 0;
}
inline double Float3::_internal_y() const {
  return y_;
}
inline double Float3::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Float3.y)
  return _internal_y();
}
inline void Float3::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Float3::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Float3.y)
}

// double z = 3;
inline void Float3::clear_z() {
  z_ = 0;
}
inline double Float3::_internal_z() const {
  return z_;
}
inline double Float3::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Float3.z)
  return _internal_z();
}
inline void Float3::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Float3::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Float3.z)
}

// -------------------------------------------------------------------

// Float4

// double x = 1;
inline void Float4::clear_x() {
  x_ = 0;
}
inline double Float4::_internal_x() const {
  return x_;
}
inline double Float4::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Float4.x)
  return _internal_x();
}
inline void Float4::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Float4::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Float4.x)
}

// double y = 2;
inline void Float4::clear_y() {
  y_ = 0;
}
inline double Float4::_internal_y() const {
  return y_;
}
inline double Float4::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Float4.y)
  return _internal_y();
}
inline void Float4::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Float4::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Float4.y)
}

// double z = 3;
inline void Float4::clear_z() {
  z_ = 0;
}
inline double Float4::_internal_z() const {
  return z_;
}
inline double Float4::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Float4.z)
  return _internal_z();
}
inline void Float4::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Float4::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Float4.z)
}

// double w = 4;
inline void Float4::clear_w() {
  w_ = 0;
}
inline double Float4::_internal_w() const {
  return w_;
}
inline double Float4::w() const {
  // @@protoc_insertion_point(field_get:Protocol.Float4.w)
  return _internal_w();
}
inline void Float4::_internal_set_w(double value) {
  
  w_ = value;
}
inline void Float4::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:Protocol.Float4.w)
}

// -------------------------------------------------------------------

// PositionData

// .Protocol.Float3 posision = 1;
inline bool PositionData::_internal_has_posision() const {
  return this != internal_default_instance() && posision_ != nullptr;
}
inline bool PositionData::has_posision() const {
  return _internal_has_posision();
}
inline void PositionData::clear_posision() {
  if (GetArenaForAllocation() == nullptr && posision_ != nullptr) {
    delete posision_;
  }
  posision_ = nullptr;
}
inline const ::Protocol::Float3& PositionData::_internal_posision() const {
  const ::Protocol::Float3* p = posision_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Float3&>(
      ::Protocol::_Float3_default_instance_);
}
inline const ::Protocol::Float3& PositionData::posision() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionData.posision)
  return _internal_posision();
}
inline void PositionData::unsafe_arena_set_allocated_posision(
    ::Protocol::Float3* posision) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posision_);
  }
  posision_ = posision;
  if (posision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PositionData.posision)
}
inline ::Protocol::Float3* PositionData::release_posision() {
  
  ::Protocol::Float3* temp = posision_;
  posision_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Float3* PositionData::unsafe_arena_release_posision() {
  // @@protoc_insertion_point(field_release:Protocol.PositionData.posision)
  
  ::Protocol::Float3* temp = posision_;
  posision_ = nullptr;
  return temp;
}
inline ::Protocol::Float3* PositionData::_internal_mutable_posision() {
  
  if (posision_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Float3>(GetArenaForAllocation());
    posision_ = p;
  }
  return posision_;
}
inline ::Protocol::Float3* PositionData::mutable_posision() {
  // @@protoc_insertion_point(field_mutable:Protocol.PositionData.posision)
  return _internal_mutable_posision();
}
inline void PositionData::set_allocated_posision(::Protocol::Float3* posision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete posision_;
  }
  if (posision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::Float3>::GetOwningArena(posision);
    if (message_arena != submessage_arena) {
      posision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posision, submessage_arena);
    }
    
  } else {
    
  }
  posision_ = posision;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PositionData.posision)
}

// .Protocol.Float4 rotation = 2;
inline bool PositionData::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool PositionData::has_rotation() const {
  return _internal_has_rotation();
}
inline void PositionData::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
inline const ::Protocol::Float4& PositionData::_internal_rotation() const {
  const ::Protocol::Float4* p = rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Float4&>(
      ::Protocol::_Float4_default_instance_);
}
inline const ::Protocol::Float4& PositionData::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionData.rotation)
  return _internal_rotation();
}
inline void PositionData::unsafe_arena_set_allocated_rotation(
    ::Protocol::Float4* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PositionData.rotation)
}
inline ::Protocol::Float4* PositionData::release_rotation() {
  
  ::Protocol::Float4* temp = rotation_;
  rotation_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Float4* PositionData::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.PositionData.rotation)
  
  ::Protocol::Float4* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Float4* PositionData::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Float4>(GetArenaForAllocation());
    rotation_ = p;
  }
  return rotation_;
}
inline ::Protocol::Float4* PositionData::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:Protocol.PositionData.rotation)
  return _internal_mutable_rotation();
}
inline void PositionData::set_allocated_rotation(::Protocol::Float4* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::Float4>::GetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PositionData.rotation)
}

// -------------------------------------------------------------------

// UserData

// uint64 sessionKey = 1;
inline void UserData::clear_sessionkey() {
  sessionkey_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserData::_internal_sessionkey() const {
  return sessionkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserData::sessionkey() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.sessionKey)
  return _internal_sessionkey();
}
inline void UserData::_internal_set_sessionkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sessionkey_ = value;
}
inline void UserData::set_sessionkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sessionkey(value);
  // @@protoc_insertion_point(field_set:Protocol.UserData.sessionKey)
}

// uint64 userKey = 2;
inline void UserData::clear_userkey() {
  userkey_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserData::_internal_userkey() const {
  return userkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserData::userkey() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.userKey)
  return _internal_userkey();
}
inline void UserData::_internal_set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userkey_ = value;
}
inline void UserData::set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userkey(value);
  // @@protoc_insertion_point(field_set:Protocol.UserData.userKey)
}

// .Protocol.Float3 position = 3;
inline bool UserData::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool UserData::has_position() const {
  return _internal_has_position();
}
inline void UserData::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::Protocol::Float3& UserData::_internal_position() const {
  const ::Protocol::Float3* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Float3&>(
      ::Protocol::_Float3_default_instance_);
}
inline const ::Protocol::Float3& UserData::position() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.position)
  return _internal_position();
}
inline void UserData::unsafe_arena_set_allocated_position(
    ::Protocol::Float3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.UserData.position)
}
inline ::Protocol::Float3* UserData::release_position() {
  
  ::Protocol::Float3* temp = position_;
  position_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Float3* UserData::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.position)
  
  ::Protocol::Float3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Protocol::Float3* UserData::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Float3>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::Protocol::Float3* UserData::mutable_position() {
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.position)
  return _internal_mutable_position();
}
inline void UserData::set_allocated_position(::Protocol::Float3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::Float3>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.position)
}

// .Protocol.Float4 rotation = 4;
inline bool UserData::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool UserData::has_rotation() const {
  return _internal_has_rotation();
}
inline void UserData::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
inline const ::Protocol::Float4& UserData::_internal_rotation() const {
  const ::Protocol::Float4* p = rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Float4&>(
      ::Protocol::_Float4_default_instance_);
}
inline const ::Protocol::Float4& UserData::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.rotation)
  return _internal_rotation();
}
inline void UserData::unsafe_arena_set_allocated_rotation(
    ::Protocol::Float4* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.UserData.rotation)
}
inline ::Protocol::Float4* UserData::release_rotation() {
  
  ::Protocol::Float4* temp = rotation_;
  rotation_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Float4* UserData::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.rotation)
  
  ::Protocol::Float4* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Float4* UserData::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Float4>(GetArenaForAllocation());
    rotation_ = p;
  }
  return rotation_;
}
inline ::Protocol::Float4* UserData::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.rotation)
  return _internal_mutable_rotation();
}
inline void UserData::set_allocated_rotation(::Protocol::Float4* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::Float4>::GetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.rotation)
}

// -------------------------------------------------------------------

// MonsterData

// uint64 monsterKey = 1;
inline void MonsterData::clear_monsterkey() {
  monsterkey_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MonsterData::_internal_monsterkey() const {
  return monsterkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MonsterData::monsterkey() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterData.monsterKey)
  return _internal_monsterkey();
}
inline void MonsterData::_internal_set_monsterkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  monsterkey_ = value;
}
inline void MonsterData::set_monsterkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_monsterkey(value);
  // @@protoc_insertion_point(field_set:Protocol.MonsterData.monsterKey)
}

// int32 hp = 2;
inline void MonsterData::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterData::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterData::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterData.hp)
  return _internal_hp();
}
inline void MonsterData::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
}
inline void MonsterData::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.MonsterData.hp)
}

// .Protocol.Float3 pos = 3;
inline bool MonsterData::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool MonsterData::has_pos() const {
  return _internal_has_pos();
}
inline void MonsterData::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::Protocol::Float3& MonsterData::_internal_pos() const {
  const ::Protocol::Float3* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Float3&>(
      ::Protocol::_Float3_default_instance_);
}
inline const ::Protocol::Float3& MonsterData::pos() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterData.pos)
  return _internal_pos();
}
inline void MonsterData::unsafe_arena_set_allocated_pos(
    ::Protocol::Float3* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.MonsterData.pos)
}
inline ::Protocol::Float3* MonsterData::release_pos() {
  
  ::Protocol::Float3* temp = pos_;
  pos_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Float3* MonsterData::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:Protocol.MonsterData.pos)
  
  ::Protocol::Float3* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Protocol::Float3* MonsterData::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Float3>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::Protocol::Float3* MonsterData::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:Protocol.MonsterData.pos)
  return _internal_mutable_pos();
}
inline void MonsterData::set_allocated_pos(::Protocol::Float3* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::Float3>::GetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.MonsterData.pos)
}

// .Protocol.Float4 Rot = 4;
inline bool MonsterData::_internal_has_rot() const {
  return this != internal_default_instance() && rot_ != nullptr;
}
inline bool MonsterData::has_rot() const {
  return _internal_has_rot();
}
inline void MonsterData::clear_rot() {
  if (GetArenaForAllocation() == nullptr && rot_ != nullptr) {
    delete rot_;
  }
  rot_ = nullptr;
}
inline const ::Protocol::Float4& MonsterData::_internal_rot() const {
  const ::Protocol::Float4* p = rot_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Float4&>(
      ::Protocol::_Float4_default_instance_);
}
inline const ::Protocol::Float4& MonsterData::rot() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterData.Rot)
  return _internal_rot();
}
inline void MonsterData::unsafe_arena_set_allocated_rot(
    ::Protocol::Float4* rot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rot_);
  }
  rot_ = rot;
  if (rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.MonsterData.Rot)
}
inline ::Protocol::Float4* MonsterData::release_rot() {
  
  ::Protocol::Float4* temp = rot_;
  rot_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Float4* MonsterData::unsafe_arena_release_rot() {
  // @@protoc_insertion_point(field_release:Protocol.MonsterData.Rot)
  
  ::Protocol::Float4* temp = rot_;
  rot_ = nullptr;
  return temp;
}
inline ::Protocol::Float4* MonsterData::_internal_mutable_rot() {
  
  if (rot_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Float4>(GetArenaForAllocation());
    rot_ = p;
  }
  return rot_;
}
inline ::Protocol::Float4* MonsterData::mutable_rot() {
  // @@protoc_insertion_point(field_mutable:Protocol.MonsterData.Rot)
  return _internal_mutable_rot();
}
inline void MonsterData::set_allocated_rot(::Protocol::Float4* rot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rot_;
  }
  if (rot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::Float4>::GetOwningArena(rot);
    if (message_arena != submessage_arena) {
      rot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rot, submessage_arena);
    }
    
  } else {
    
  }
  rot_ = rot;
  // @@protoc_insertion_point(field_set_allocated:Protocol.MonsterData.Rot)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
