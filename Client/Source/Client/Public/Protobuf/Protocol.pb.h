// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#pragma warning(disable: 4125)
#pragma warning(disable: 4668)
#pragma warning(disable: 4577)

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C2P_ReportMove;
struct C2P_ReportMoveDefaultTypeInternal;
extern C2P_ReportMoveDefaultTypeInternal _C2P_ReportMove_default_instance_;
class C2P_RequestLogin;
struct C2P_RequestLoginDefaultTypeInternal;
extern C2P_RequestLoginDefaultTypeInternal _C2P_RequestLogin_default_instance_;
class C2P_RequestPlayerAttack;
struct C2P_RequestPlayerAttackDefaultTypeInternal;
extern C2P_RequestPlayerAttackDefaultTypeInternal _C2P_RequestPlayerAttack_default_instance_;
class C2P_RequestWorldData;
struct C2P_RequestWorldDataDefaultTypeInternal;
extern C2P_RequestWorldDataDefaultTypeInternal _C2P_RequestWorldData_default_instance_;
class P2C_ReportEnterUser;
struct P2C_ReportEnterUserDefaultTypeInternal;
extern P2C_ReportEnterUserDefaultTypeInternal _P2C_ReportEnterUser_default_instance_;
class P2C_ReportLeaveUser;
struct P2C_ReportLeaveUserDefaultTypeInternal;
extern P2C_ReportLeaveUserDefaultTypeInternal _P2C_ReportLeaveUser_default_instance_;
class P2C_ReportMonsterState;
struct P2C_ReportMonsterStateDefaultTypeInternal;
extern P2C_ReportMonsterStateDefaultTypeInternal _P2C_ReportMonsterState_default_instance_;
class P2C_ReportMove;
struct P2C_ReportMoveDefaultTypeInternal;
extern P2C_ReportMoveDefaultTypeInternal _P2C_ReportMove_default_instance_;
class P2C_ReportPlayerAttack;
struct P2C_ReportPlayerAttackDefaultTypeInternal;
extern P2C_ReportPlayerAttackDefaultTypeInternal _P2C_ReportPlayerAttack_default_instance_;
class P2C_ResultLogin;
struct P2C_ResultLoginDefaultTypeInternal;
extern P2C_ResultLoginDefaultTypeInternal _P2C_ResultLogin_default_instance_;
class P2C_ResultPlayerAttack;
struct P2C_ResultPlayerAttackDefaultTypeInternal;
extern P2C_ResultPlayerAttackDefaultTypeInternal _P2C_ResultPlayerAttack_default_instance_;
class P2C_ResultWorldData;
struct P2C_ResultWorldDataDefaultTypeInternal;
extern P2C_ResultWorldDataDefaultTypeInternal _P2C_ResultWorldData_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C2P_ReportMove* Arena::CreateMaybeMessage<::Protocol::C2P_ReportMove>(Arena*);
template<> ::Protocol::C2P_RequestLogin* Arena::CreateMaybeMessage<::Protocol::C2P_RequestLogin>(Arena*);
template<> ::Protocol::C2P_RequestPlayerAttack* Arena::CreateMaybeMessage<::Protocol::C2P_RequestPlayerAttack>(Arena*);
template<> ::Protocol::C2P_RequestWorldData* Arena::CreateMaybeMessage<::Protocol::C2P_RequestWorldData>(Arena*);
template<> ::Protocol::P2C_ReportEnterUser* Arena::CreateMaybeMessage<::Protocol::P2C_ReportEnterUser>(Arena*);
template<> ::Protocol::P2C_ReportLeaveUser* Arena::CreateMaybeMessage<::Protocol::P2C_ReportLeaveUser>(Arena*);
template<> ::Protocol::P2C_ReportMonsterState* Arena::CreateMaybeMessage<::Protocol::P2C_ReportMonsterState>(Arena*);
template<> ::Protocol::P2C_ReportMove* Arena::CreateMaybeMessage<::Protocol::P2C_ReportMove>(Arena*);
template<> ::Protocol::P2C_ReportPlayerAttack* Arena::CreateMaybeMessage<::Protocol::P2C_ReportPlayerAttack>(Arena*);
template<> ::Protocol::P2C_ResultLogin* Arena::CreateMaybeMessage<::Protocol::P2C_ResultLogin>(Arena*);
template<> ::Protocol::P2C_ResultPlayerAttack* Arena::CreateMaybeMessage<::Protocol::P2C_ResultPlayerAttack>(Arena*);
template<> ::Protocol::P2C_ResultWorldData* Arena::CreateMaybeMessage<::Protocol::P2C_ResultWorldData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C2P_RequestLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2P_RequestLogin) */ {
 public:
  inline C2P_RequestLogin() : C2P_RequestLogin(nullptr) {}
  ~C2P_RequestLogin() override;
  explicit constexpr C2P_RequestLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2P_RequestLogin(const C2P_RequestLogin& from);
  C2P_RequestLogin(C2P_RequestLogin&& from) noexcept
    : C2P_RequestLogin() {
    *this = ::std::move(from);
  }

  inline C2P_RequestLogin& operator=(const C2P_RequestLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2P_RequestLogin& operator=(C2P_RequestLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2P_RequestLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2P_RequestLogin* internal_default_instance() {
    return reinterpret_cast<const C2P_RequestLogin*>(
               &_C2P_RequestLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C2P_RequestLogin& a, C2P_RequestLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(C2P_RequestLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2P_RequestLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2P_RequestLogin* New() const final {
    return new C2P_RequestLogin();
  }

  C2P_RequestLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2P_RequestLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2P_RequestLogin& from);
  void MergeFrom(const C2P_RequestLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2P_RequestLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2P_RequestLogin";
  }
  protected:
  explicit C2P_RequestLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPwFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string pw = 2;
  void clear_pw();
  const std::string& pw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pw();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_pw();
  void set_allocated_pw(std::string* pw);
  private:
  const std::string& _internal_pw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pw(const std::string& value);
  std::string* _internal_mutable_pw();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2P_RequestLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class P2C_ResultLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.P2C_ResultLogin) */ {
 public:
  inline P2C_ResultLogin() : P2C_ResultLogin(nullptr) {}
  ~P2C_ResultLogin() override;
  explicit constexpr P2C_ResultLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P2C_ResultLogin(const P2C_ResultLogin& from);
  P2C_ResultLogin(P2C_ResultLogin&& from) noexcept
    : P2C_ResultLogin() {
    *this = ::std::move(from);
  }

  inline P2C_ResultLogin& operator=(const P2C_ResultLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline P2C_ResultLogin& operator=(P2C_ResultLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P2C_ResultLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const P2C_ResultLogin* internal_default_instance() {
    return reinterpret_cast<const P2C_ResultLogin*>(
               &_P2C_ResultLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(P2C_ResultLogin& a, P2C_ResultLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(P2C_ResultLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P2C_ResultLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P2C_ResultLogin* New() const final {
    return new P2C_ResultLogin();
  }

  P2C_ResultLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P2C_ResultLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const P2C_ResultLogin& from);
  void MergeFrom(const P2C_ResultLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P2C_ResultLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.P2C_ResultLogin";
  }
  protected:
  explicit P2C_ResultLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.P2C_ResultLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2P_RequestWorldData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2P_RequestWorldData) */ {
 public:
  inline C2P_RequestWorldData() : C2P_RequestWorldData(nullptr) {}
  ~C2P_RequestWorldData() override;
  explicit constexpr C2P_RequestWorldData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2P_RequestWorldData(const C2P_RequestWorldData& from);
  C2P_RequestWorldData(C2P_RequestWorldData&& from) noexcept
    : C2P_RequestWorldData() {
    *this = ::std::move(from);
  }

  inline C2P_RequestWorldData& operator=(const C2P_RequestWorldData& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2P_RequestWorldData& operator=(C2P_RequestWorldData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2P_RequestWorldData& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2P_RequestWorldData* internal_default_instance() {
    return reinterpret_cast<const C2P_RequestWorldData*>(
               &_C2P_RequestWorldData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C2P_RequestWorldData& a, C2P_RequestWorldData& b) {
    a.Swap(&b);
  }
  inline void Swap(C2P_RequestWorldData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2P_RequestWorldData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2P_RequestWorldData* New() const final {
    return new C2P_RequestWorldData();
  }

  C2P_RequestWorldData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2P_RequestWorldData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2P_RequestWorldData& from);
  void MergeFrom(const C2P_RequestWorldData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2P_RequestWorldData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2P_RequestWorldData";
  }
  protected:
  explicit C2P_RequestWorldData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2P_RequestWorldData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class P2C_ResultWorldData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.P2C_ResultWorldData) */ {
 public:
  inline P2C_ResultWorldData() : P2C_ResultWorldData(nullptr) {}
  ~P2C_ResultWorldData() override;
  explicit constexpr P2C_ResultWorldData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P2C_ResultWorldData(const P2C_ResultWorldData& from);
  P2C_ResultWorldData(P2C_ResultWorldData&& from) noexcept
    : P2C_ResultWorldData() {
    *this = ::std::move(from);
  }

  inline P2C_ResultWorldData& operator=(const P2C_ResultWorldData& from) {
    CopyFrom(from);
    return *this;
  }
  inline P2C_ResultWorldData& operator=(P2C_ResultWorldData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P2C_ResultWorldData& default_instance() {
    return *internal_default_instance();
  }
  static inline const P2C_ResultWorldData* internal_default_instance() {
    return reinterpret_cast<const P2C_ResultWorldData*>(
               &_P2C_ResultWorldData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(P2C_ResultWorldData& a, P2C_ResultWorldData& b) {
    a.Swap(&b);
  }
  inline void Swap(P2C_ResultWorldData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P2C_ResultWorldData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P2C_ResultWorldData* New() const final {
    return new P2C_ResultWorldData();
  }

  P2C_ResultWorldData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P2C_ResultWorldData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const P2C_ResultWorldData& from);
  void MergeFrom(const P2C_ResultWorldData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P2C_ResultWorldData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.P2C_ResultWorldData";
  }
  protected:
  explicit P2C_ResultWorldData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
    kMonstersFieldNumber = 2,
  };
  // repeated .Protocol.UserData Users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::Protocol::UserData* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserData >*
      mutable_users();
  private:
  const ::Protocol::UserData& _internal_users(int index) const;
  ::Protocol::UserData* _internal_add_users();
  public:
  const ::Protocol::UserData& users(int index) const;
  ::Protocol::UserData* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserData >&
      users() const;

  // repeated .Protocol.MonsterData Monsters = 2;
  int monsters_size() const;
  private:
  int _internal_monsters_size() const;
  public:
  void clear_monsters();
  ::Protocol::MonsterData* mutable_monsters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::MonsterData >*
      mutable_monsters();
  private:
  const ::Protocol::MonsterData& _internal_monsters(int index) const;
  ::Protocol::MonsterData* _internal_add_monsters();
  public:
  const ::Protocol::MonsterData& monsters(int index) const;
  ::Protocol::MonsterData* add_monsters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::MonsterData >&
      monsters() const;

  // @@protoc_insertion_point(class_scope:Protocol.P2C_ResultWorldData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserData > users_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::MonsterData > monsters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class P2C_ReportEnterUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.P2C_ReportEnterUser) */ {
 public:
  inline P2C_ReportEnterUser() : P2C_ReportEnterUser(nullptr) {}
  ~P2C_ReportEnterUser() override;
  explicit constexpr P2C_ReportEnterUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P2C_ReportEnterUser(const P2C_ReportEnterUser& from);
  P2C_ReportEnterUser(P2C_ReportEnterUser&& from) noexcept
    : P2C_ReportEnterUser() {
    *this = ::std::move(from);
  }

  inline P2C_ReportEnterUser& operator=(const P2C_ReportEnterUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline P2C_ReportEnterUser& operator=(P2C_ReportEnterUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P2C_ReportEnterUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const P2C_ReportEnterUser* internal_default_instance() {
    return reinterpret_cast<const P2C_ReportEnterUser*>(
               &_P2C_ReportEnterUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(P2C_ReportEnterUser& a, P2C_ReportEnterUser& b) {
    a.Swap(&b);
  }
  inline void Swap(P2C_ReportEnterUser* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P2C_ReportEnterUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P2C_ReportEnterUser* New() const final {
    return new P2C_ReportEnterUser();
  }

  P2C_ReportEnterUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P2C_ReportEnterUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const P2C_ReportEnterUser& from);
  void MergeFrom(const P2C_ReportEnterUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P2C_ReportEnterUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.P2C_ReportEnterUser";
  }
  protected:
  explicit P2C_ReportEnterUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // .Protocol.UserData User = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::Protocol::UserData& user() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::UserData* release_user();
  ::Protocol::UserData* mutable_user();
  void set_allocated_user(::Protocol::UserData* user);
  private:
  const ::Protocol::UserData& _internal_user() const;
  ::Protocol::UserData* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::Protocol::UserData* user);
  ::Protocol::UserData* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:Protocol.P2C_ReportEnterUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::UserData* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class P2C_ReportLeaveUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.P2C_ReportLeaveUser) */ {
 public:
  inline P2C_ReportLeaveUser() : P2C_ReportLeaveUser(nullptr) {}
  ~P2C_ReportLeaveUser() override;
  explicit constexpr P2C_ReportLeaveUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P2C_ReportLeaveUser(const P2C_ReportLeaveUser& from);
  P2C_ReportLeaveUser(P2C_ReportLeaveUser&& from) noexcept
    : P2C_ReportLeaveUser() {
    *this = ::std::move(from);
  }

  inline P2C_ReportLeaveUser& operator=(const P2C_ReportLeaveUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline P2C_ReportLeaveUser& operator=(P2C_ReportLeaveUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P2C_ReportLeaveUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const P2C_ReportLeaveUser* internal_default_instance() {
    return reinterpret_cast<const P2C_ReportLeaveUser*>(
               &_P2C_ReportLeaveUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(P2C_ReportLeaveUser& a, P2C_ReportLeaveUser& b) {
    a.Swap(&b);
  }
  inline void Swap(P2C_ReportLeaveUser* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P2C_ReportLeaveUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P2C_ReportLeaveUser* New() const final {
    return new P2C_ReportLeaveUser();
  }

  P2C_ReportLeaveUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P2C_ReportLeaveUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const P2C_ReportLeaveUser& from);
  void MergeFrom(const P2C_ReportLeaveUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P2C_ReportLeaveUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.P2C_ReportLeaveUser";
  }
  protected:
  explicit P2C_ReportLeaveUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserKeyFieldNumber = 1,
  };
  // uint64 UserKey = 1;
  void clear_userkey();
  ::PROTOBUF_NAMESPACE_ID::uint64 userkey() const;
  void set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userkey() const;
  void _internal_set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.P2C_ReportLeaveUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2P_ReportMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2P_ReportMove) */ {
 public:
  inline C2P_ReportMove() : C2P_ReportMove(nullptr) {}
  ~C2P_ReportMove() override;
  explicit constexpr C2P_ReportMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2P_ReportMove(const C2P_ReportMove& from);
  C2P_ReportMove(C2P_ReportMove&& from) noexcept
    : C2P_ReportMove() {
    *this = ::std::move(from);
  }

  inline C2P_ReportMove& operator=(const C2P_ReportMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2P_ReportMove& operator=(C2P_ReportMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2P_ReportMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2P_ReportMove* internal_default_instance() {
    return reinterpret_cast<const C2P_ReportMove*>(
               &_C2P_ReportMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C2P_ReportMove& a, C2P_ReportMove& b) {
    a.Swap(&b);
  }
  inline void Swap(C2P_ReportMove* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2P_ReportMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2P_ReportMove* New() const final {
    return new C2P_ReportMove();
  }

  C2P_ReportMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2P_ReportMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2P_ReportMove& from);
  void MergeFrom(const C2P_ReportMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2P_ReportMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2P_ReportMove";
  }
  protected:
  explicit C2P_ReportMove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserDataFieldNumber = 1,
  };
  // .Protocol.UserData userData = 1;
  bool has_userdata() const;
  private:
  bool _internal_has_userdata() const;
  public:
  void clear_userdata();
  const ::Protocol::UserData& userdata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::UserData* release_userdata();
  ::Protocol::UserData* mutable_userdata();
  void set_allocated_userdata(::Protocol::UserData* userdata);
  private:
  const ::Protocol::UserData& _internal_userdata() const;
  ::Protocol::UserData* _internal_mutable_userdata();
  public:
  void unsafe_arena_set_allocated_userdata(
      ::Protocol::UserData* userdata);
  ::Protocol::UserData* unsafe_arena_release_userdata();

  // @@protoc_insertion_point(class_scope:Protocol.C2P_ReportMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::UserData* userdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class P2C_ReportMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.P2C_ReportMove) */ {
 public:
  inline P2C_ReportMove() : P2C_ReportMove(nullptr) {}
  ~P2C_ReportMove() override;
  explicit constexpr P2C_ReportMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P2C_ReportMove(const P2C_ReportMove& from);
  P2C_ReportMove(P2C_ReportMove&& from) noexcept
    : P2C_ReportMove() {
    *this = ::std::move(from);
  }

  inline P2C_ReportMove& operator=(const P2C_ReportMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline P2C_ReportMove& operator=(P2C_ReportMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P2C_ReportMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const P2C_ReportMove* internal_default_instance() {
    return reinterpret_cast<const P2C_ReportMove*>(
               &_P2C_ReportMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(P2C_ReportMove& a, P2C_ReportMove& b) {
    a.Swap(&b);
  }
  inline void Swap(P2C_ReportMove* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P2C_ReportMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P2C_ReportMove* New() const final {
    return new P2C_ReportMove();
  }

  P2C_ReportMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P2C_ReportMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const P2C_ReportMove& from);
  void MergeFrom(const P2C_ReportMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P2C_ReportMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.P2C_ReportMove";
  }
  protected:
  explicit P2C_ReportMove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserDataFieldNumber = 1,
  };
  // .Protocol.UserData userData = 1;
  bool has_userdata() const;
  private:
  bool _internal_has_userdata() const;
  public:
  void clear_userdata();
  const ::Protocol::UserData& userdata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::UserData* release_userdata();
  ::Protocol::UserData* mutable_userdata();
  void set_allocated_userdata(::Protocol::UserData* userdata);
  private:
  const ::Protocol::UserData& _internal_userdata() const;
  ::Protocol::UserData* _internal_mutable_userdata();
  public:
  void unsafe_arena_set_allocated_userdata(
      ::Protocol::UserData* userdata);
  ::Protocol::UserData* unsafe_arena_release_userdata();

  // @@protoc_insertion_point(class_scope:Protocol.P2C_ReportMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::UserData* userdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2P_RequestPlayerAttack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2P_RequestPlayerAttack) */ {
 public:
  inline C2P_RequestPlayerAttack() : C2P_RequestPlayerAttack(nullptr) {}
  ~C2P_RequestPlayerAttack() override;
  explicit constexpr C2P_RequestPlayerAttack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2P_RequestPlayerAttack(const C2P_RequestPlayerAttack& from);
  C2P_RequestPlayerAttack(C2P_RequestPlayerAttack&& from) noexcept
    : C2P_RequestPlayerAttack() {
    *this = ::std::move(from);
  }

  inline C2P_RequestPlayerAttack& operator=(const C2P_RequestPlayerAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2P_RequestPlayerAttack& operator=(C2P_RequestPlayerAttack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2P_RequestPlayerAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2P_RequestPlayerAttack* internal_default_instance() {
    return reinterpret_cast<const C2P_RequestPlayerAttack*>(
               &_C2P_RequestPlayerAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C2P_RequestPlayerAttack& a, C2P_RequestPlayerAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(C2P_RequestPlayerAttack* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2P_RequestPlayerAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2P_RequestPlayerAttack* New() const final {
    return new C2P_RequestPlayerAttack();
  }

  C2P_RequestPlayerAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2P_RequestPlayerAttack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2P_RequestPlayerAttack& from);
  void MergeFrom(const C2P_RequestPlayerAttack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2P_RequestPlayerAttack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2P_RequestPlayerAttack";
  }
  protected:
  explicit C2P_RequestPlayerAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVictimKeyFieldNumber = 2,
    kDamageAmountFieldNumber = 1,
  };
  // uint64 victimKey = 2;
  void clear_victimkey();
  ::PROTOBUF_NAMESPACE_ID::uint64 victimkey() const;
  void set_victimkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_victimkey() const;
  void _internal_set_victimkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float DamageAmount = 1;
  void clear_damageamount();
  float damageamount() const;
  void set_damageamount(float value);
  private:
  float _internal_damageamount() const;
  void _internal_set_damageamount(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2P_RequestPlayerAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 victimkey_;
  float damageamount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class P2C_ResultPlayerAttack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.P2C_ResultPlayerAttack) */ {
 public:
  inline P2C_ResultPlayerAttack() : P2C_ResultPlayerAttack(nullptr) {}
  ~P2C_ResultPlayerAttack() override;
  explicit constexpr P2C_ResultPlayerAttack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P2C_ResultPlayerAttack(const P2C_ResultPlayerAttack& from);
  P2C_ResultPlayerAttack(P2C_ResultPlayerAttack&& from) noexcept
    : P2C_ResultPlayerAttack() {
    *this = ::std::move(from);
  }

  inline P2C_ResultPlayerAttack& operator=(const P2C_ResultPlayerAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline P2C_ResultPlayerAttack& operator=(P2C_ResultPlayerAttack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P2C_ResultPlayerAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const P2C_ResultPlayerAttack* internal_default_instance() {
    return reinterpret_cast<const P2C_ResultPlayerAttack*>(
               &_P2C_ResultPlayerAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(P2C_ResultPlayerAttack& a, P2C_ResultPlayerAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(P2C_ResultPlayerAttack* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P2C_ResultPlayerAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P2C_ResultPlayerAttack* New() const final {
    return new P2C_ResultPlayerAttack();
  }

  P2C_ResultPlayerAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P2C_ResultPlayerAttack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const P2C_ResultPlayerAttack& from);
  void MergeFrom(const P2C_ResultPlayerAttack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P2C_ResultPlayerAttack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.P2C_ResultPlayerAttack";
  }
  protected:
  explicit P2C_ResultPlayerAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVictimKeyFieldNumber = 2,
    kDamageAmountFieldNumber = 1,
  };
  // uint64 VictimKey = 2;
  void clear_victimkey();
  ::PROTOBUF_NAMESPACE_ID::uint64 victimkey() const;
  void set_victimkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_victimkey() const;
  void _internal_set_victimkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float DamageAmount = 1;
  void clear_damageamount();
  float damageamount() const;
  void set_damageamount(float value);
  private:
  float _internal_damageamount() const;
  void _internal_set_damageamount(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.P2C_ResultPlayerAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 victimkey_;
  float damageamount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class P2C_ReportPlayerAttack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.P2C_ReportPlayerAttack) */ {
 public:
  inline P2C_ReportPlayerAttack() : P2C_ReportPlayerAttack(nullptr) {}
  ~P2C_ReportPlayerAttack() override;
  explicit constexpr P2C_ReportPlayerAttack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P2C_ReportPlayerAttack(const P2C_ReportPlayerAttack& from);
  P2C_ReportPlayerAttack(P2C_ReportPlayerAttack&& from) noexcept
    : P2C_ReportPlayerAttack() {
    *this = ::std::move(from);
  }

  inline P2C_ReportPlayerAttack& operator=(const P2C_ReportPlayerAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline P2C_ReportPlayerAttack& operator=(P2C_ReportPlayerAttack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P2C_ReportPlayerAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const P2C_ReportPlayerAttack* internal_default_instance() {
    return reinterpret_cast<const P2C_ReportPlayerAttack*>(
               &_P2C_ReportPlayerAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(P2C_ReportPlayerAttack& a, P2C_ReportPlayerAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(P2C_ReportPlayerAttack* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P2C_ReportPlayerAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P2C_ReportPlayerAttack* New() const final {
    return new P2C_ReportPlayerAttack();
  }

  P2C_ReportPlayerAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P2C_ReportPlayerAttack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const P2C_ReportPlayerAttack& from);
  void MergeFrom(const P2C_ReportPlayerAttack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P2C_ReportPlayerAttack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.P2C_ReportPlayerAttack";
  }
  protected:
  explicit P2C_ReportPlayerAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackerFieldNumber = 1,
    kVictimKeyFieldNumber = 3,
    kDamageAmountFieldNumber = 2,
  };
  // uint64 Attacker = 1;
  void clear_attacker();
  ::PROTOBUF_NAMESPACE_ID::uint64 attacker() const;
  void set_attacker(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_attacker() const;
  void _internal_set_attacker(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 VictimKey = 3;
  void clear_victimkey();
  ::PROTOBUF_NAMESPACE_ID::uint64 victimkey() const;
  void set_victimkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_victimkey() const;
  void _internal_set_victimkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float DamageAmount = 2;
  void clear_damageamount();
  float damageamount() const;
  void set_damageamount(float value);
  private:
  float _internal_damageamount() const;
  void _internal_set_damageamount(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.P2C_ReportPlayerAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 attacker_;
  ::PROTOBUF_NAMESPACE_ID::uint64 victimkey_;
  float damageamount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class P2C_ReportMonsterState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.P2C_ReportMonsterState) */ {
 public:
  inline P2C_ReportMonsterState() : P2C_ReportMonsterState(nullptr) {}
  ~P2C_ReportMonsterState() override;
  explicit constexpr P2C_ReportMonsterState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P2C_ReportMonsterState(const P2C_ReportMonsterState& from);
  P2C_ReportMonsterState(P2C_ReportMonsterState&& from) noexcept
    : P2C_ReportMonsterState() {
    *this = ::std::move(from);
  }

  inline P2C_ReportMonsterState& operator=(const P2C_ReportMonsterState& from) {
    CopyFrom(from);
    return *this;
  }
  inline P2C_ReportMonsterState& operator=(P2C_ReportMonsterState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P2C_ReportMonsterState& default_instance() {
    return *internal_default_instance();
  }
  static inline const P2C_ReportMonsterState* internal_default_instance() {
    return reinterpret_cast<const P2C_ReportMonsterState*>(
               &_P2C_ReportMonsterState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(P2C_ReportMonsterState& a, P2C_ReportMonsterState& b) {
    a.Swap(&b);
  }
  inline void Swap(P2C_ReportMonsterState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P2C_ReportMonsterState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P2C_ReportMonsterState* New() const final {
    return new P2C_ReportMonsterState();
  }

  P2C_ReportMonsterState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P2C_ReportMonsterState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const P2C_ReportMonsterState& from);
  void MergeFrom(const P2C_ReportMonsterState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P2C_ReportMonsterState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.P2C_ReportMonsterState";
  }
  protected:
  explicit P2C_ReportMonsterState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterFieldNumber = 2,
    kTargetFieldNumber = 3,
    kActorKeyFieldNumber = 1,
  };
  // .Protocol.MonsterData monster = 2;
  bool has_monster() const;
  private:
  bool _internal_has_monster() const;
  public:
  void clear_monster();
  const ::Protocol::MonsterData& monster() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::MonsterData* release_monster();
  ::Protocol::MonsterData* mutable_monster();
  void set_allocated_monster(::Protocol::MonsterData* monster);
  private:
  const ::Protocol::MonsterData& _internal_monster() const;
  ::Protocol::MonsterData* _internal_mutable_monster();
  public:
  void unsafe_arena_set_allocated_monster(
      ::Protocol::MonsterData* monster);
  ::Protocol::MonsterData* unsafe_arena_release_monster();

  // .Protocol.TransFormData Target = 3;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::Protocol::TransFormData& target() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::TransFormData* release_target();
  ::Protocol::TransFormData* mutable_target();
  void set_allocated_target(::Protocol::TransFormData* target);
  private:
  const ::Protocol::TransFormData& _internal_target() const;
  ::Protocol::TransFormData* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::Protocol::TransFormData* target);
  ::Protocol::TransFormData* unsafe_arena_release_target();

  // uint64 ActorKey = 1;
  void clear_actorkey();
  ::PROTOBUF_NAMESPACE_ID::uint64 actorkey() const;
  void set_actorkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_actorkey() const;
  void _internal_set_actorkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.P2C_ReportMonsterState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::MonsterData* monster_;
  ::Protocol::TransFormData* target_;
  ::PROTOBUF_NAMESPACE_ID::uint64 actorkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C2P_RequestLogin

// string id = 1;
inline void C2P_RequestLogin::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& C2P_RequestLogin::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2P_RequestLogin.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2P_RequestLogin::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2P_RequestLogin.id)
}
inline std::string* C2P_RequestLogin::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Protocol.C2P_RequestLogin.id)
  return _internal_mutable_id();
}
inline const std::string& C2P_RequestLogin::_internal_id() const {
  return id_.Get();
}
inline void C2P_RequestLogin::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2P_RequestLogin::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2P_RequestLogin::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.C2P_RequestLogin.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2P_RequestLogin::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2P_RequestLogin.id)
}

// string pw = 2;
inline void C2P_RequestLogin::clear_pw() {
  pw_.ClearToEmpty();
}
inline const std::string& C2P_RequestLogin::pw() const {
  // @@protoc_insertion_point(field_get:Protocol.C2P_RequestLogin.pw)
  return _internal_pw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2P_RequestLogin::set_pw(ArgT0&& arg0, ArgT... args) {
 
 pw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2P_RequestLogin.pw)
}
inline std::string* C2P_RequestLogin::mutable_pw() {
  // @@protoc_insertion_point(field_mutable:Protocol.C2P_RequestLogin.pw)
  return _internal_mutable_pw();
}
inline const std::string& C2P_RequestLogin::_internal_pw() const {
  return pw_.Get();
}
inline void C2P_RequestLogin::_internal_set_pw(const std::string& value) {
  
  pw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2P_RequestLogin::_internal_mutable_pw() {
  
  return pw_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2P_RequestLogin::release_pw() {
  // @@protoc_insertion_point(field_release:Protocol.C2P_RequestLogin.pw)
  return pw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2P_RequestLogin::set_allocated_pw(std::string* pw) {
  if (pw != nullptr) {
    
  } else {
    
  }
  pw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pw,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2P_RequestLogin.pw)
}

// -------------------------------------------------------------------

// P2C_ResultLogin

// uint32 result = 1;
inline void P2C_ResultLogin::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 P2C_ResultLogin::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 P2C_ResultLogin::result() const {
  // @@protoc_insertion_point(field_get:Protocol.P2C_ResultLogin.result)
  return _internal_result();
}
inline void P2C_ResultLogin::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void P2C_ResultLogin::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Protocol.P2C_ResultLogin.result)
}

// -------------------------------------------------------------------

// C2P_RequestWorldData

// -------------------------------------------------------------------

// P2C_ResultWorldData

// repeated .Protocol.UserData Users = 1;
inline int P2C_ResultWorldData::_internal_users_size() const {
  return users_.size();
}
inline int P2C_ResultWorldData::users_size() const {
  return _internal_users_size();
}
inline ::Protocol::UserData* P2C_ResultWorldData::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.P2C_ResultWorldData.Users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserData >*
P2C_ResultWorldData::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.P2C_ResultWorldData.Users)
  return &users_;
}
inline const ::Protocol::UserData& P2C_ResultWorldData::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::Protocol::UserData& P2C_ResultWorldData::users(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.P2C_ResultWorldData.Users)
  return _internal_users(index);
}
inline ::Protocol::UserData* P2C_ResultWorldData::_internal_add_users() {
  return users_.Add();
}
inline ::Protocol::UserData* P2C_ResultWorldData::add_users() {
  // @@protoc_insertion_point(field_add:Protocol.P2C_ResultWorldData.Users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserData >&
P2C_ResultWorldData::users() const {
  // @@protoc_insertion_point(field_list:Protocol.P2C_ResultWorldData.Users)
  return users_;
}

// repeated .Protocol.MonsterData Monsters = 2;
inline int P2C_ResultWorldData::_internal_monsters_size() const {
  return monsters_.size();
}
inline int P2C_ResultWorldData::monsters_size() const {
  return _internal_monsters_size();
}
inline ::Protocol::MonsterData* P2C_ResultWorldData::mutable_monsters(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.P2C_ResultWorldData.Monsters)
  return monsters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::MonsterData >*
P2C_ResultWorldData::mutable_monsters() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.P2C_ResultWorldData.Monsters)
  return &monsters_;
}
inline const ::Protocol::MonsterData& P2C_ResultWorldData::_internal_monsters(int index) const {
  return monsters_.Get(index);
}
inline const ::Protocol::MonsterData& P2C_ResultWorldData::monsters(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.P2C_ResultWorldData.Monsters)
  return _internal_monsters(index);
}
inline ::Protocol::MonsterData* P2C_ResultWorldData::_internal_add_monsters() {
  return monsters_.Add();
}
inline ::Protocol::MonsterData* P2C_ResultWorldData::add_monsters() {
  // @@protoc_insertion_point(field_add:Protocol.P2C_ResultWorldData.Monsters)
  return _internal_add_monsters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::MonsterData >&
P2C_ResultWorldData::monsters() const {
  // @@protoc_insertion_point(field_list:Protocol.P2C_ResultWorldData.Monsters)
  return monsters_;
}

// -------------------------------------------------------------------

// P2C_ReportEnterUser

// .Protocol.UserData User = 1;
inline bool P2C_ReportEnterUser::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool P2C_ReportEnterUser::has_user() const {
  return _internal_has_user();
}
inline const ::Protocol::UserData& P2C_ReportEnterUser::_internal_user() const {
  const ::Protocol::UserData* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::UserData&>(
      ::Protocol::_UserData_default_instance_);
}
inline const ::Protocol::UserData& P2C_ReportEnterUser::user() const {
  // @@protoc_insertion_point(field_get:Protocol.P2C_ReportEnterUser.User)
  return _internal_user();
}
inline void P2C_ReportEnterUser::unsafe_arena_set_allocated_user(
    ::Protocol::UserData* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.P2C_ReportEnterUser.User)
}
inline ::Protocol::UserData* P2C_ReportEnterUser::release_user() {
  
  ::Protocol::UserData* temp = user_;
  user_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::UserData* P2C_ReportEnterUser::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:Protocol.P2C_ReportEnterUser.User)
  
  ::Protocol::UserData* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::Protocol::UserData* P2C_ReportEnterUser::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::UserData>(GetArenaForAllocation());
    user_ = p;
  }
  return user_;
}
inline ::Protocol::UserData* P2C_ReportEnterUser::mutable_user() {
  // @@protoc_insertion_point(field_mutable:Protocol.P2C_ReportEnterUser.User)
  return _internal_mutable_user();
}
inline void P2C_ReportEnterUser::set_allocated_user(::Protocol::UserData* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user));
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:Protocol.P2C_ReportEnterUser.User)
}

// -------------------------------------------------------------------

// P2C_ReportLeaveUser

// uint64 UserKey = 1;
inline void P2C_ReportLeaveUser::clear_userkey() {
  userkey_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 P2C_ReportLeaveUser::_internal_userkey() const {
  return userkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 P2C_ReportLeaveUser::userkey() const {
  // @@protoc_insertion_point(field_get:Protocol.P2C_ReportLeaveUser.UserKey)
  return _internal_userkey();
}
inline void P2C_ReportLeaveUser::_internal_set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userkey_ = value;
}
inline void P2C_ReportLeaveUser::set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userkey(value);
  // @@protoc_insertion_point(field_set:Protocol.P2C_ReportLeaveUser.UserKey)
}

// -------------------------------------------------------------------

// C2P_ReportMove

// .Protocol.UserData userData = 1;
inline bool C2P_ReportMove::_internal_has_userdata() const {
  return this != internal_default_instance() && userdata_ != nullptr;
}
inline bool C2P_ReportMove::has_userdata() const {
  return _internal_has_userdata();
}
inline const ::Protocol::UserData& C2P_ReportMove::_internal_userdata() const {
  const ::Protocol::UserData* p = userdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::UserData&>(
      ::Protocol::_UserData_default_instance_);
}
inline const ::Protocol::UserData& C2P_ReportMove::userdata() const {
  // @@protoc_insertion_point(field_get:Protocol.C2P_ReportMove.userData)
  return _internal_userdata();
}
inline void C2P_ReportMove::unsafe_arena_set_allocated_userdata(
    ::Protocol::UserData* userdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdata_);
  }
  userdata_ = userdata;
  if (userdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2P_ReportMove.userData)
}
inline ::Protocol::UserData* C2P_ReportMove::release_userdata() {
  
  ::Protocol::UserData* temp = userdata_;
  userdata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::UserData* C2P_ReportMove::unsafe_arena_release_userdata() {
  // @@protoc_insertion_point(field_release:Protocol.C2P_ReportMove.userData)
  
  ::Protocol::UserData* temp = userdata_;
  userdata_ = nullptr;
  return temp;
}
inline ::Protocol::UserData* C2P_ReportMove::_internal_mutable_userdata() {
  
  if (userdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::UserData>(GetArenaForAllocation());
    userdata_ = p;
  }
  return userdata_;
}
inline ::Protocol::UserData* C2P_ReportMove::mutable_userdata() {
  // @@protoc_insertion_point(field_mutable:Protocol.C2P_ReportMove.userData)
  return _internal_mutable_userdata();
}
inline void C2P_ReportMove::set_allocated_userdata(::Protocol::UserData* userdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdata_);
  }
  if (userdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdata));
    if (message_arena != submessage_arena) {
      userdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userdata, submessage_arena);
    }
    
  } else {
    
  }
  userdata_ = userdata;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2P_ReportMove.userData)
}

// -------------------------------------------------------------------

// P2C_ReportMove

// .Protocol.UserData userData = 1;
inline bool P2C_ReportMove::_internal_has_userdata() const {
  return this != internal_default_instance() && userdata_ != nullptr;
}
inline bool P2C_ReportMove::has_userdata() const {
  return _internal_has_userdata();
}
inline const ::Protocol::UserData& P2C_ReportMove::_internal_userdata() const {
  const ::Protocol::UserData* p = userdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::UserData&>(
      ::Protocol::_UserData_default_instance_);
}
inline const ::Protocol::UserData& P2C_ReportMove::userdata() const {
  // @@protoc_insertion_point(field_get:Protocol.P2C_ReportMove.userData)
  return _internal_userdata();
}
inline void P2C_ReportMove::unsafe_arena_set_allocated_userdata(
    ::Protocol::UserData* userdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdata_);
  }
  userdata_ = userdata;
  if (userdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.P2C_ReportMove.userData)
}
inline ::Protocol::UserData* P2C_ReportMove::release_userdata() {
  
  ::Protocol::UserData* temp = userdata_;
  userdata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::UserData* P2C_ReportMove::unsafe_arena_release_userdata() {
  // @@protoc_insertion_point(field_release:Protocol.P2C_ReportMove.userData)
  
  ::Protocol::UserData* temp = userdata_;
  userdata_ = nullptr;
  return temp;
}
inline ::Protocol::UserData* P2C_ReportMove::_internal_mutable_userdata() {
  
  if (userdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::UserData>(GetArenaForAllocation());
    userdata_ = p;
  }
  return userdata_;
}
inline ::Protocol::UserData* P2C_ReportMove::mutable_userdata() {
  // @@protoc_insertion_point(field_mutable:Protocol.P2C_ReportMove.userData)
  return _internal_mutable_userdata();
}
inline void P2C_ReportMove::set_allocated_userdata(::Protocol::UserData* userdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdata_);
  }
  if (userdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdata));
    if (message_arena != submessage_arena) {
      userdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userdata, submessage_arena);
    }
    
  } else {
    
  }
  userdata_ = userdata;
  // @@protoc_insertion_point(field_set_allocated:Protocol.P2C_ReportMove.userData)
}

// -------------------------------------------------------------------

// C2P_RequestPlayerAttack

// float DamageAmount = 1;
inline void C2P_RequestPlayerAttack::clear_damageamount() {
  damageamount_ = 0;
}
inline float C2P_RequestPlayerAttack::_internal_damageamount() const {
  return damageamount_;
}
inline float C2P_RequestPlayerAttack::damageamount() const {
  // @@protoc_insertion_point(field_get:Protocol.C2P_RequestPlayerAttack.DamageAmount)
  return _internal_damageamount();
}
inline void C2P_RequestPlayerAttack::_internal_set_damageamount(float value) {
  
  damageamount_ = value;
}
inline void C2P_RequestPlayerAttack::set_damageamount(float value) {
  _internal_set_damageamount(value);
  // @@protoc_insertion_point(field_set:Protocol.C2P_RequestPlayerAttack.DamageAmount)
}

// uint64 victimKey = 2;
inline void C2P_RequestPlayerAttack::clear_victimkey() {
  victimkey_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C2P_RequestPlayerAttack::_internal_victimkey() const {
  return victimkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C2P_RequestPlayerAttack::victimkey() const {
  // @@protoc_insertion_point(field_get:Protocol.C2P_RequestPlayerAttack.victimKey)
  return _internal_victimkey();
}
inline void C2P_RequestPlayerAttack::_internal_set_victimkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  victimkey_ = value;
}
inline void C2P_RequestPlayerAttack::set_victimkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_victimkey(value);
  // @@protoc_insertion_point(field_set:Protocol.C2P_RequestPlayerAttack.victimKey)
}

// -------------------------------------------------------------------

// P2C_ResultPlayerAttack

// float DamageAmount = 1;
inline void P2C_ResultPlayerAttack::clear_damageamount() {
  damageamount_ = 0;
}
inline float P2C_ResultPlayerAttack::_internal_damageamount() const {
  return damageamount_;
}
inline float P2C_ResultPlayerAttack::damageamount() const {
  // @@protoc_insertion_point(field_get:Protocol.P2C_ResultPlayerAttack.DamageAmount)
  return _internal_damageamount();
}
inline void P2C_ResultPlayerAttack::_internal_set_damageamount(float value) {
  
  damageamount_ = value;
}
inline void P2C_ResultPlayerAttack::set_damageamount(float value) {
  _internal_set_damageamount(value);
  // @@protoc_insertion_point(field_set:Protocol.P2C_ResultPlayerAttack.DamageAmount)
}

// uint64 VictimKey = 2;
inline void P2C_ResultPlayerAttack::clear_victimkey() {
  victimkey_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 P2C_ResultPlayerAttack::_internal_victimkey() const {
  return victimkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 P2C_ResultPlayerAttack::victimkey() const {
  // @@protoc_insertion_point(field_get:Protocol.P2C_ResultPlayerAttack.VictimKey)
  return _internal_victimkey();
}
inline void P2C_ResultPlayerAttack::_internal_set_victimkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  victimkey_ = value;
}
inline void P2C_ResultPlayerAttack::set_victimkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_victimkey(value);
  // @@protoc_insertion_point(field_set:Protocol.P2C_ResultPlayerAttack.VictimKey)
}

// -------------------------------------------------------------------

// P2C_ReportPlayerAttack

// uint64 Attacker = 1;
inline void P2C_ReportPlayerAttack::clear_attacker() {
  attacker_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 P2C_ReportPlayerAttack::_internal_attacker() const {
  return attacker_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 P2C_ReportPlayerAttack::attacker() const {
  // @@protoc_insertion_point(field_get:Protocol.P2C_ReportPlayerAttack.Attacker)
  return _internal_attacker();
}
inline void P2C_ReportPlayerAttack::_internal_set_attacker(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  attacker_ = value;
}
inline void P2C_ReportPlayerAttack::set_attacker(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_attacker(value);
  // @@protoc_insertion_point(field_set:Protocol.P2C_ReportPlayerAttack.Attacker)
}

// float DamageAmount = 2;
inline void P2C_ReportPlayerAttack::clear_damageamount() {
  damageamount_ = 0;
}
inline float P2C_ReportPlayerAttack::_internal_damageamount() const {
  return damageamount_;
}
inline float P2C_ReportPlayerAttack::damageamount() const {
  // @@protoc_insertion_point(field_get:Protocol.P2C_ReportPlayerAttack.DamageAmount)
  return _internal_damageamount();
}
inline void P2C_ReportPlayerAttack::_internal_set_damageamount(float value) {
  
  damageamount_ = value;
}
inline void P2C_ReportPlayerAttack::set_damageamount(float value) {
  _internal_set_damageamount(value);
  // @@protoc_insertion_point(field_set:Protocol.P2C_ReportPlayerAttack.DamageAmount)
}

// uint64 VictimKey = 3;
inline void P2C_ReportPlayerAttack::clear_victimkey() {
  victimkey_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 P2C_ReportPlayerAttack::_internal_victimkey() const {
  return victimkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 P2C_ReportPlayerAttack::victimkey() const {
  // @@protoc_insertion_point(field_get:Protocol.P2C_ReportPlayerAttack.VictimKey)
  return _internal_victimkey();
}
inline void P2C_ReportPlayerAttack::_internal_set_victimkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  victimkey_ = value;
}
inline void P2C_ReportPlayerAttack::set_victimkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_victimkey(value);
  // @@protoc_insertion_point(field_set:Protocol.P2C_ReportPlayerAttack.VictimKey)
}

// -------------------------------------------------------------------

// P2C_ReportMonsterState

// uint64 ActorKey = 1;
inline void P2C_ReportMonsterState::clear_actorkey() {
  actorkey_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 P2C_ReportMonsterState::_internal_actorkey() const {
  return actorkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 P2C_ReportMonsterState::actorkey() const {
  // @@protoc_insertion_point(field_get:Protocol.P2C_ReportMonsterState.ActorKey)
  return _internal_actorkey();
}
inline void P2C_ReportMonsterState::_internal_set_actorkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  actorkey_ = value;
}
inline void P2C_ReportMonsterState::set_actorkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_actorkey(value);
  // @@protoc_insertion_point(field_set:Protocol.P2C_ReportMonsterState.ActorKey)
}

// .Protocol.MonsterData monster = 2;
inline bool P2C_ReportMonsterState::_internal_has_monster() const {
  return this != internal_default_instance() && monster_ != nullptr;
}
inline bool P2C_ReportMonsterState::has_monster() const {
  return _internal_has_monster();
}
inline const ::Protocol::MonsterData& P2C_ReportMonsterState::_internal_monster() const {
  const ::Protocol::MonsterData* p = monster_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::MonsterData&>(
      ::Protocol::_MonsterData_default_instance_);
}
inline const ::Protocol::MonsterData& P2C_ReportMonsterState::monster() const {
  // @@protoc_insertion_point(field_get:Protocol.P2C_ReportMonsterState.monster)
  return _internal_monster();
}
inline void P2C_ReportMonsterState::unsafe_arena_set_allocated_monster(
    ::Protocol::MonsterData* monster) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(monster_);
  }
  monster_ = monster;
  if (monster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.P2C_ReportMonsterState.monster)
}
inline ::Protocol::MonsterData* P2C_ReportMonsterState::release_monster() {
  
  ::Protocol::MonsterData* temp = monster_;
  monster_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::MonsterData* P2C_ReportMonsterState::unsafe_arena_release_monster() {
  // @@protoc_insertion_point(field_release:Protocol.P2C_ReportMonsterState.monster)
  
  ::Protocol::MonsterData* temp = monster_;
  monster_ = nullptr;
  return temp;
}
inline ::Protocol::MonsterData* P2C_ReportMonsterState::_internal_mutable_monster() {
  
  if (monster_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::MonsterData>(GetArenaForAllocation());
    monster_ = p;
  }
  return monster_;
}
inline ::Protocol::MonsterData* P2C_ReportMonsterState::mutable_monster() {
  // @@protoc_insertion_point(field_mutable:Protocol.P2C_ReportMonsterState.monster)
  return _internal_mutable_monster();
}
inline void P2C_ReportMonsterState::set_allocated_monster(::Protocol::MonsterData* monster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(monster_);
  }
  if (monster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(monster));
    if (message_arena != submessage_arena) {
      monster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monster, submessage_arena);
    }
    
  } else {
    
  }
  monster_ = monster;
  // @@protoc_insertion_point(field_set_allocated:Protocol.P2C_ReportMonsterState.monster)
}

// .Protocol.TransFormData Target = 3;
inline bool P2C_ReportMonsterState::_internal_has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline bool P2C_ReportMonsterState::has_target() const {
  return _internal_has_target();
}
inline const ::Protocol::TransFormData& P2C_ReportMonsterState::_internal_target() const {
  const ::Protocol::TransFormData* p = target_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::TransFormData&>(
      ::Protocol::_TransFormData_default_instance_);
}
inline const ::Protocol::TransFormData& P2C_ReportMonsterState::target() const {
  // @@protoc_insertion_point(field_get:Protocol.P2C_ReportMonsterState.Target)
  return _internal_target();
}
inline void P2C_ReportMonsterState::unsafe_arena_set_allocated_target(
    ::Protocol::TransFormData* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.P2C_ReportMonsterState.Target)
}
inline ::Protocol::TransFormData* P2C_ReportMonsterState::release_target() {
  
  ::Protocol::TransFormData* temp = target_;
  target_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::TransFormData* P2C_ReportMonsterState::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:Protocol.P2C_ReportMonsterState.Target)
  
  ::Protocol::TransFormData* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::Protocol::TransFormData* P2C_ReportMonsterState::_internal_mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::TransFormData>(GetArenaForAllocation());
    target_ = p;
  }
  return target_;
}
inline ::Protocol::TransFormData* P2C_ReportMonsterState::mutable_target() {
  // @@protoc_insertion_point(field_mutable:Protocol.P2C_ReportMonsterState.Target)
  return _internal_mutable_target();
}
inline void P2C_ReportMonsterState::set_allocated_target(::Protocol::TransFormData* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target));
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:Protocol.P2C_ReportMonsterState.Target)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
