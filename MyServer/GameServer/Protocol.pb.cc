// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Protocol {
constexpr C2P_RequestLogin::C2P_RequestLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pw_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct C2P_RequestLoginDefaultTypeInternal {
  constexpr C2P_RequestLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C2P_RequestLoginDefaultTypeInternal() {}
  union {
    C2P_RequestLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C2P_RequestLoginDefaultTypeInternal _C2P_RequestLogin_default_instance_;
constexpr P2C_ResultLogin::P2C_ResultLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct P2C_ResultLoginDefaultTypeInternal {
  constexpr P2C_ResultLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P2C_ResultLoginDefaultTypeInternal() {}
  union {
    P2C_ResultLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P2C_ResultLoginDefaultTypeInternal _P2C_ResultLogin_default_instance_;
constexpr C2P_ReportMove::C2P_ReportMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_(nullptr)
  , sessionkey_(int64_t{0}){}
struct C2P_ReportMoveDefaultTypeInternal {
  constexpr C2P_ReportMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C2P_ReportMoveDefaultTypeInternal() {}
  union {
    C2P_ReportMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C2P_ReportMoveDefaultTypeInternal _C2P_ReportMove_default_instance_;
constexpr P2C_ReportMove::P2C_ReportMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_(nullptr)
  , sessionkey_(int64_t{0}){}
struct P2C_ReportMoveDefaultTypeInternal {
  constexpr P2C_ReportMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P2C_ReportMoveDefaultTypeInternal() {}
  union {
    P2C_ReportMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P2C_ReportMoveDefaultTypeInternal _P2C_ReportMove_default_instance_;
constexpr C2P_RequestCollison::C2P_RequestCollison(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : descdatas_()
  , src_(nullptr)
  , sessionkey_(int64_t{0}){}
struct C2P_RequestCollisonDefaultTypeInternal {
  constexpr C2P_RequestCollisonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C2P_RequestCollisonDefaultTypeInternal() {}
  union {
    C2P_RequestCollison _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C2P_RequestCollisonDefaultTypeInternal _C2P_RequestCollison_default_instance_;
constexpr P2C_ResultCollision::P2C_ResultCollision(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : descdatass_()
  , src_(nullptr)
  , result_(0u){}
struct P2C_ResultCollisionDefaultTypeInternal {
  constexpr P2C_ResultCollisionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P2C_ResultCollisionDefaultTypeInternal() {}
  union {
    P2C_ResultCollision _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P2C_ResultCollisionDefaultTypeInternal _P2C_ResultCollision_default_instance_;
constexpr P2C_ReportUpdateMonsters::P2C_ReportUpdateMonsters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : datas_(){}
struct P2C_ReportUpdateMonstersDefaultTypeInternal {
  constexpr P2C_ReportUpdateMonstersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P2C_ReportUpdateMonstersDefaultTypeInternal() {}
  union {
    P2C_ReportUpdateMonsters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P2C_ReportUpdateMonstersDefaultTypeInternal _P2C_ReportUpdateMonsters_default_instance_;
constexpr P2C_ReportEnterUser::P2C_ReportEnterUser(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_(nullptr){}
struct P2C_ReportEnterUserDefaultTypeInternal {
  constexpr P2C_ReportEnterUserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~P2C_ReportEnterUserDefaultTypeInternal() {}
  union {
    P2C_ReportEnterUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT P2C_ReportEnterUserDefaultTypeInternal _P2C_ReportEnterUser_default_instance_;
}  // namespace Protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Protocol_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2P_RequestLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2P_RequestLogin, id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2P_RequestLogin, pw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::P2C_ResultLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::P2C_ResultLogin, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2P_ReportMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2P_ReportMove, sessionkey_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2P_ReportMove, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::P2C_ReportMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::P2C_ReportMove, sessionkey_),
  PROTOBUF_FIELD_OFFSET(::Protocol::P2C_ReportMove, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2P_RequestCollison, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2P_RequestCollison, sessionkey_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2P_RequestCollison, src_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2P_RequestCollison, descdatas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::P2C_ResultCollision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::P2C_ResultCollision, result_),
  PROTOBUF_FIELD_OFFSET(::Protocol::P2C_ResultCollision, src_),
  PROTOBUF_FIELD_OFFSET(::Protocol::P2C_ResultCollision, descdatass_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::P2C_ReportUpdateMonsters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::P2C_ReportUpdateMonsters, datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::P2C_ReportEnterUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::P2C_ReportEnterUser, user_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Protocol::C2P_RequestLogin)},
  { 7, -1, sizeof(::Protocol::P2C_ResultLogin)},
  { 13, -1, sizeof(::Protocol::C2P_ReportMove)},
  { 20, -1, sizeof(::Protocol::P2C_ReportMove)},
  { 27, -1, sizeof(::Protocol::C2P_RequestCollison)},
  { 35, -1, sizeof(::Protocol::P2C_ResultCollision)},
  { 43, -1, sizeof(::Protocol::P2C_ReportUpdateMonsters)},
  { 49, -1, sizeof(::Protocol::P2C_ReportEnterUser)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C2P_RequestLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_P2C_ResultLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C2P_ReportMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_P2C_ReportMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C2P_RequestCollison_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_P2C_ResultCollision_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_P2C_ReportUpdateMonsters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_P2C_ReportEnterUser_default_instance_),
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\032\nEnum.proto\032\014"
  "Struct.proto\"*\n\020C2P_RequestLogin\022\n\n\002id\030\001"
  " \001(\t\022\n\n\002pw\030\002 \001(\t\"!\n\017P2C_ResultLogin\022\016\n\006r"
  "esult\030\001 \001(\r\"F\n\016C2P_ReportMove\022\022\n\nsession"
  "Key\030\001 \001(\003\022 \n\004user\030\002 \001(\0132\022.Protocol.UserD"
  "ata\"F\n\016P2C_ReportMove\022\022\n\nsessionKey\030\001 \001("
  "\003\022 \n\004user\030\002 \001(\0132\022.Protocol.UserData\"t\n\023C"
  "2P_RequestCollison\022\022\n\nsessionKey\030\001 \001(\003\022\037"
  "\n\003src\030\002 \001(\0132\022.Protocol.UserData\022(\n\tdescD"
  "atas\030\004 \003(\0132\025.Protocol.MonsterData\"q\n\023P2C"
  "_ResultCollision\022\016\n\006result\030\001 \001(\r\022\037\n\003src\030"
  "\002 \001(\0132\022.Protocol.UserData\022)\n\ndescDatass\030"
  "\005 \003(\0132\025.Protocol.MonsterData\"@\n\030P2C_Repo"
  "rtUpdateMonsters\022$\n\005datas\030\005 \003(\0132\025.Protoc"
  "ol.MonsterData\"7\n\023P2C_ReportEnterUser\022 \n"
  "\004user\030\001 \001(\0132\022.Protocol.UserDatab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Protocol_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Protocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto = {
  false, false, 639, descriptor_table_protodef_Protocol_2eproto, "Protocol.proto", 
  &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 2, 8,
  schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
  file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto, file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class C2P_RequestLogin::_Internal {
 public:
};

C2P_RequestLogin::C2P_RequestLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2P_RequestLogin)
}
C2P_RequestLogin::C2P_RequestLogin(const C2P_RequestLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  pw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pw().empty()) {
    pw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pw(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C2P_RequestLogin)
}

void C2P_RequestLogin::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

C2P_RequestLogin::~C2P_RequestLogin() {
  // @@protoc_insertion_point(destructor:Protocol.C2P_RequestLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C2P_RequestLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C2P_RequestLogin::ArenaDtor(void* object) {
  C2P_RequestLogin* _this = reinterpret_cast< C2P_RequestLogin* >(object);
  (void)_this;
}
void C2P_RequestLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C2P_RequestLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C2P_RequestLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2P_RequestLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  pw_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2P_RequestLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.C2P_RequestLogin.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.C2P_RequestLogin.pw"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2P_RequestLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2P_RequestLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C2P_RequestLogin.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string pw = 2;
  if (!this->pw().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pw().data(), static_cast<int>(this->_internal_pw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C2P_RequestLogin.pw");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2P_RequestLogin)
  return target;
}

size_t C2P_RequestLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2P_RequestLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string pw = 2;
  if (!this->pw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pw());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2P_RequestLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C2P_RequestLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const C2P_RequestLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2P_RequestLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C2P_RequestLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C2P_RequestLogin)
    MergeFrom(*source);
  }
}

void C2P_RequestLogin::MergeFrom(const C2P_RequestLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2P_RequestLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from.pw().empty()) {
    _internal_set_pw(from._internal_pw());
  }
}

void C2P_RequestLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C2P_RequestLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2P_RequestLogin::CopyFrom(const C2P_RequestLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2P_RequestLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2P_RequestLogin::IsInitialized() const {
  return true;
}

void C2P_RequestLogin::InternalSwap(C2P_RequestLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pw_, GetArenaForAllocation(),
      &other->pw_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C2P_RequestLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class P2C_ResultLogin::_Internal {
 public:
};

P2C_ResultLogin::P2C_ResultLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.P2C_ResultLogin)
}
P2C_ResultLogin::P2C_ResultLogin(const P2C_ResultLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Protocol.P2C_ResultLogin)
}

void P2C_ResultLogin::SharedCtor() {
result_ = 0u;
}

P2C_ResultLogin::~P2C_ResultLogin() {
  // @@protoc_insertion_point(destructor:Protocol.P2C_ResultLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void P2C_ResultLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void P2C_ResultLogin::ArenaDtor(void* object) {
  P2C_ResultLogin* _this = reinterpret_cast< P2C_ResultLogin* >(object);
  (void)_this;
}
void P2C_ResultLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P2C_ResultLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P2C_ResultLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.P2C_ResultLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P2C_ResultLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P2C_ResultLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.P2C_ResultLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.P2C_ResultLogin)
  return target;
}

size_t P2C_ResultLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.P2C_ResultLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void P2C_ResultLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.P2C_ResultLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const P2C_ResultLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<P2C_ResultLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.P2C_ResultLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.P2C_ResultLogin)
    MergeFrom(*source);
  }
}

void P2C_ResultLogin::MergeFrom(const P2C_ResultLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.P2C_ResultLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void P2C_ResultLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.P2C_ResultLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P2C_ResultLogin::CopyFrom(const P2C_ResultLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.P2C_ResultLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P2C_ResultLogin::IsInitialized() const {
  return true;
}

void P2C_ResultLogin::InternalSwap(P2C_ResultLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P2C_ResultLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class C2P_ReportMove::_Internal {
 public:
  static const ::Protocol::UserData& user(const C2P_ReportMove* msg);
};

const ::Protocol::UserData&
C2P_ReportMove::_Internal::user(const C2P_ReportMove* msg) {
  return *msg->user_;
}
void C2P_ReportMove::clear_user() {
  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
C2P_ReportMove::C2P_ReportMove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2P_ReportMove)
}
C2P_ReportMove::C2P_ReportMove(const C2P_ReportMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::Protocol::UserData(*from.user_);
  } else {
    user_ = nullptr;
  }
  sessionkey_ = from.sessionkey_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C2P_ReportMove)
}

void C2P_ReportMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sessionkey_) -
    reinterpret_cast<char*>(&user_)) + sizeof(sessionkey_));
}

C2P_ReportMove::~C2P_ReportMove() {
  // @@protoc_insertion_point(destructor:Protocol.C2P_ReportMove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C2P_ReportMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void C2P_ReportMove::ArenaDtor(void* object) {
  C2P_ReportMove* _this = reinterpret_cast< C2P_ReportMove* >(object);
  (void)_this;
}
void C2P_ReportMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C2P_ReportMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C2P_ReportMove::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2P_ReportMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  sessionkey_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2P_ReportMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 sessionKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sessionkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.UserData user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2P_ReportMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2P_ReportMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sessionKey = 1;
  if (this->sessionkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_sessionkey(), target);
  }

  // .Protocol.UserData user = 2;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2P_ReportMove)
  return target;
}

size_t C2P_ReportMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2P_ReportMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.UserData user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // int64 sessionKey = 1;
  if (this->sessionkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sessionkey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2P_ReportMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C2P_ReportMove)
  GOOGLE_DCHECK_NE(&from, this);
  const C2P_ReportMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2P_ReportMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C2P_ReportMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C2P_ReportMove)
    MergeFrom(*source);
  }
}

void C2P_ReportMove::MergeFrom(const C2P_ReportMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2P_ReportMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::Protocol::UserData::MergeFrom(from._internal_user());
  }
  if (from.sessionkey() != 0) {
    _internal_set_sessionkey(from._internal_sessionkey());
  }
}

void C2P_ReportMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C2P_ReportMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2P_ReportMove::CopyFrom(const C2P_ReportMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2P_ReportMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2P_ReportMove::IsInitialized() const {
  return true;
}

void C2P_ReportMove::InternalSwap(C2P_ReportMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C2P_ReportMove, sessionkey_)
      + sizeof(C2P_ReportMove::sessionkey_)
      - PROTOBUF_FIELD_OFFSET(C2P_ReportMove, user_)>(
          reinterpret_cast<char*>(&user_),
          reinterpret_cast<char*>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C2P_ReportMove::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class P2C_ReportMove::_Internal {
 public:
  static const ::Protocol::UserData& user(const P2C_ReportMove* msg);
};

const ::Protocol::UserData&
P2C_ReportMove::_Internal::user(const P2C_ReportMove* msg) {
  return *msg->user_;
}
void P2C_ReportMove::clear_user() {
  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
P2C_ReportMove::P2C_ReportMove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.P2C_ReportMove)
}
P2C_ReportMove::P2C_ReportMove(const P2C_ReportMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::Protocol::UserData(*from.user_);
  } else {
    user_ = nullptr;
  }
  sessionkey_ = from.sessionkey_;
  // @@protoc_insertion_point(copy_constructor:Protocol.P2C_ReportMove)
}

void P2C_ReportMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sessionkey_) -
    reinterpret_cast<char*>(&user_)) + sizeof(sessionkey_));
}

P2C_ReportMove::~P2C_ReportMove() {
  // @@protoc_insertion_point(destructor:Protocol.P2C_ReportMove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void P2C_ReportMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void P2C_ReportMove::ArenaDtor(void* object) {
  P2C_ReportMove* _this = reinterpret_cast< P2C_ReportMove* >(object);
  (void)_this;
}
void P2C_ReportMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P2C_ReportMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P2C_ReportMove::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.P2C_ReportMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  sessionkey_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P2C_ReportMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 sessionKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sessionkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.UserData user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P2C_ReportMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.P2C_ReportMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sessionKey = 1;
  if (this->sessionkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_sessionkey(), target);
  }

  // .Protocol.UserData user = 2;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.P2C_ReportMove)
  return target;
}

size_t P2C_ReportMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.P2C_ReportMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.UserData user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // int64 sessionKey = 1;
  if (this->sessionkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sessionkey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void P2C_ReportMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.P2C_ReportMove)
  GOOGLE_DCHECK_NE(&from, this);
  const P2C_ReportMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<P2C_ReportMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.P2C_ReportMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.P2C_ReportMove)
    MergeFrom(*source);
  }
}

void P2C_ReportMove::MergeFrom(const P2C_ReportMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.P2C_ReportMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::Protocol::UserData::MergeFrom(from._internal_user());
  }
  if (from.sessionkey() != 0) {
    _internal_set_sessionkey(from._internal_sessionkey());
  }
}

void P2C_ReportMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.P2C_ReportMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P2C_ReportMove::CopyFrom(const P2C_ReportMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.P2C_ReportMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P2C_ReportMove::IsInitialized() const {
  return true;
}

void P2C_ReportMove::InternalSwap(P2C_ReportMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P2C_ReportMove, sessionkey_)
      + sizeof(P2C_ReportMove::sessionkey_)
      - PROTOBUF_FIELD_OFFSET(P2C_ReportMove, user_)>(
          reinterpret_cast<char*>(&user_),
          reinterpret_cast<char*>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P2C_ReportMove::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class C2P_RequestCollison::_Internal {
 public:
  static const ::Protocol::UserData& src(const C2P_RequestCollison* msg);
};

const ::Protocol::UserData&
C2P_RequestCollison::_Internal::src(const C2P_RequestCollison* msg) {
  return *msg->src_;
}
void C2P_RequestCollison::clear_src() {
  if (GetArenaForAllocation() == nullptr && src_ != nullptr) {
    delete src_;
  }
  src_ = nullptr;
}
void C2P_RequestCollison::clear_descdatas() {
  descdatas_.Clear();
}
C2P_RequestCollison::C2P_RequestCollison(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  descdatas_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2P_RequestCollison)
}
C2P_RequestCollison::C2P_RequestCollison(const C2P_RequestCollison& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      descdatas_(from.descdatas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_src()) {
    src_ = new ::Protocol::UserData(*from.src_);
  } else {
    src_ = nullptr;
  }
  sessionkey_ = from.sessionkey_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C2P_RequestCollison)
}

void C2P_RequestCollison::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&src_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sessionkey_) -
    reinterpret_cast<char*>(&src_)) + sizeof(sessionkey_));
}

C2P_RequestCollison::~C2P_RequestCollison() {
  // @@protoc_insertion_point(destructor:Protocol.C2P_RequestCollison)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C2P_RequestCollison::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete src_;
}

void C2P_RequestCollison::ArenaDtor(void* object) {
  C2P_RequestCollison* _this = reinterpret_cast< C2P_RequestCollison* >(object);
  (void)_this;
}
void C2P_RequestCollison::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C2P_RequestCollison::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C2P_RequestCollison::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2P_RequestCollison)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  descdatas_.Clear();
  if (GetArenaForAllocation() == nullptr && src_ != nullptr) {
    delete src_;
  }
  src_ = nullptr;
  sessionkey_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2P_RequestCollison::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 sessionKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sessionkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.UserData src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_src(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Protocol.MonsterData descDatas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_descdatas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2P_RequestCollison::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2P_RequestCollison)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sessionKey = 1;
  if (this->sessionkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_sessionkey(), target);
  }

  // .Protocol.UserData src = 2;
  if (this->has_src()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::src(this), target, stream);
  }

  // repeated .Protocol.MonsterData descDatas = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_descdatas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_descdatas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2P_RequestCollison)
  return target;
}

size_t C2P_RequestCollison::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2P_RequestCollison)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.MonsterData descDatas = 4;
  total_size += 1UL * this->_internal_descdatas_size();
  for (const auto& msg : this->descdatas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Protocol.UserData src = 2;
  if (this->has_src()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);
  }

  // int64 sessionKey = 1;
  if (this->sessionkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sessionkey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2P_RequestCollison::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C2P_RequestCollison)
  GOOGLE_DCHECK_NE(&from, this);
  const C2P_RequestCollison* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2P_RequestCollison>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C2P_RequestCollison)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C2P_RequestCollison)
    MergeFrom(*source);
  }
}

void C2P_RequestCollison::MergeFrom(const C2P_RequestCollison& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2P_RequestCollison)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  descdatas_.MergeFrom(from.descdatas_);
  if (from.has_src()) {
    _internal_mutable_src()->::Protocol::UserData::MergeFrom(from._internal_src());
  }
  if (from.sessionkey() != 0) {
    _internal_set_sessionkey(from._internal_sessionkey());
  }
}

void C2P_RequestCollison::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C2P_RequestCollison)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2P_RequestCollison::CopyFrom(const C2P_RequestCollison& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2P_RequestCollison)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2P_RequestCollison::IsInitialized() const {
  return true;
}

void C2P_RequestCollison::InternalSwap(C2P_RequestCollison* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  descdatas_.InternalSwap(&other->descdatas_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C2P_RequestCollison, sessionkey_)
      + sizeof(C2P_RequestCollison::sessionkey_)
      - PROTOBUF_FIELD_OFFSET(C2P_RequestCollison, src_)>(
          reinterpret_cast<char*>(&src_),
          reinterpret_cast<char*>(&other->src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C2P_RequestCollison::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class P2C_ResultCollision::_Internal {
 public:
  static const ::Protocol::UserData& src(const P2C_ResultCollision* msg);
};

const ::Protocol::UserData&
P2C_ResultCollision::_Internal::src(const P2C_ResultCollision* msg) {
  return *msg->src_;
}
void P2C_ResultCollision::clear_src() {
  if (GetArenaForAllocation() == nullptr && src_ != nullptr) {
    delete src_;
  }
  src_ = nullptr;
}
void P2C_ResultCollision::clear_descdatass() {
  descdatass_.Clear();
}
P2C_ResultCollision::P2C_ResultCollision(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  descdatass_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.P2C_ResultCollision)
}
P2C_ResultCollision::P2C_ResultCollision(const P2C_ResultCollision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      descdatass_(from.descdatass_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_src()) {
    src_ = new ::Protocol::UserData(*from.src_);
  } else {
    src_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Protocol.P2C_ResultCollision)
}

void P2C_ResultCollision::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&src_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&src_)) + sizeof(result_));
}

P2C_ResultCollision::~P2C_ResultCollision() {
  // @@protoc_insertion_point(destructor:Protocol.P2C_ResultCollision)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void P2C_ResultCollision::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete src_;
}

void P2C_ResultCollision::ArenaDtor(void* object) {
  P2C_ResultCollision* _this = reinterpret_cast< P2C_ResultCollision* >(object);
  (void)_this;
}
void P2C_ResultCollision::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P2C_ResultCollision::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P2C_ResultCollision::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.P2C_ResultCollision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  descdatass_.Clear();
  if (GetArenaForAllocation() == nullptr && src_ != nullptr) {
    delete src_;
  }
  src_ = nullptr;
  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P2C_ResultCollision::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.UserData src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_src(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Protocol.MonsterData descDatass = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_descdatass(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P2C_ResultCollision::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.P2C_ResultCollision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // .Protocol.UserData src = 2;
  if (this->has_src()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::src(this), target, stream);
  }

  // repeated .Protocol.MonsterData descDatass = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_descdatass_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_descdatass(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.P2C_ResultCollision)
  return target;
}

size_t P2C_ResultCollision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.P2C_ResultCollision)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.MonsterData descDatass = 5;
  total_size += 1UL * this->_internal_descdatass_size();
  for (const auto& msg : this->descdatass_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Protocol.UserData src = 2;
  if (this->has_src()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);
  }

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void P2C_ResultCollision::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.P2C_ResultCollision)
  GOOGLE_DCHECK_NE(&from, this);
  const P2C_ResultCollision* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<P2C_ResultCollision>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.P2C_ResultCollision)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.P2C_ResultCollision)
    MergeFrom(*source);
  }
}

void P2C_ResultCollision::MergeFrom(const P2C_ResultCollision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.P2C_ResultCollision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  descdatass_.MergeFrom(from.descdatass_);
  if (from.has_src()) {
    _internal_mutable_src()->::Protocol::UserData::MergeFrom(from._internal_src());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void P2C_ResultCollision::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.P2C_ResultCollision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P2C_ResultCollision::CopyFrom(const P2C_ResultCollision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.P2C_ResultCollision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P2C_ResultCollision::IsInitialized() const {
  return true;
}

void P2C_ResultCollision::InternalSwap(P2C_ResultCollision* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  descdatass_.InternalSwap(&other->descdatass_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P2C_ResultCollision, result_)
      + sizeof(P2C_ResultCollision::result_)
      - PROTOBUF_FIELD_OFFSET(P2C_ResultCollision, src_)>(
          reinterpret_cast<char*>(&src_),
          reinterpret_cast<char*>(&other->src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P2C_ResultCollision::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class P2C_ReportUpdateMonsters::_Internal {
 public:
};

void P2C_ReportUpdateMonsters::clear_datas() {
  datas_.Clear();
}
P2C_ReportUpdateMonsters::P2C_ReportUpdateMonsters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  datas_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.P2C_ReportUpdateMonsters)
}
P2C_ReportUpdateMonsters::P2C_ReportUpdateMonsters(const P2C_ReportUpdateMonsters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.P2C_ReportUpdateMonsters)
}

void P2C_ReportUpdateMonsters::SharedCtor() {
}

P2C_ReportUpdateMonsters::~P2C_ReportUpdateMonsters() {
  // @@protoc_insertion_point(destructor:Protocol.P2C_ReportUpdateMonsters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void P2C_ReportUpdateMonsters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void P2C_ReportUpdateMonsters::ArenaDtor(void* object) {
  P2C_ReportUpdateMonsters* _this = reinterpret_cast< P2C_ReportUpdateMonsters* >(object);
  (void)_this;
}
void P2C_ReportUpdateMonsters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P2C_ReportUpdateMonsters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P2C_ReportUpdateMonsters::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.P2C_ReportUpdateMonsters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P2C_ReportUpdateMonsters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.MonsterData datas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P2C_ReportUpdateMonsters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.P2C_ReportUpdateMonsters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.MonsterData datas = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.P2C_ReportUpdateMonsters)
  return target;
}

size_t P2C_ReportUpdateMonsters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.P2C_ReportUpdateMonsters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.MonsterData datas = 5;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void P2C_ReportUpdateMonsters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.P2C_ReportUpdateMonsters)
  GOOGLE_DCHECK_NE(&from, this);
  const P2C_ReportUpdateMonsters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<P2C_ReportUpdateMonsters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.P2C_ReportUpdateMonsters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.P2C_ReportUpdateMonsters)
    MergeFrom(*source);
  }
}

void P2C_ReportUpdateMonsters::MergeFrom(const P2C_ReportUpdateMonsters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.P2C_ReportUpdateMonsters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
}

void P2C_ReportUpdateMonsters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.P2C_ReportUpdateMonsters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P2C_ReportUpdateMonsters::CopyFrom(const P2C_ReportUpdateMonsters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.P2C_ReportUpdateMonsters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P2C_ReportUpdateMonsters::IsInitialized() const {
  return true;
}

void P2C_ReportUpdateMonsters::InternalSwap(P2C_ReportUpdateMonsters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  datas_.InternalSwap(&other->datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P2C_ReportUpdateMonsters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class P2C_ReportEnterUser::_Internal {
 public:
  static const ::Protocol::UserData& user(const P2C_ReportEnterUser* msg);
};

const ::Protocol::UserData&
P2C_ReportEnterUser::_Internal::user(const P2C_ReportEnterUser* msg) {
  return *msg->user_;
}
void P2C_ReportEnterUser::clear_user() {
  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
P2C_ReportEnterUser::P2C_ReportEnterUser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.P2C_ReportEnterUser)
}
P2C_ReportEnterUser::P2C_ReportEnterUser(const P2C_ReportEnterUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::Protocol::UserData(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.P2C_ReportEnterUser)
}

void P2C_ReportEnterUser::SharedCtor() {
user_ = nullptr;
}

P2C_ReportEnterUser::~P2C_ReportEnterUser() {
  // @@protoc_insertion_point(destructor:Protocol.P2C_ReportEnterUser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void P2C_ReportEnterUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void P2C_ReportEnterUser::ArenaDtor(void* object) {
  P2C_ReportEnterUser* _this = reinterpret_cast< P2C_ReportEnterUser* >(object);
  (void)_this;
}
void P2C_ReportEnterUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P2C_ReportEnterUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void P2C_ReportEnterUser::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.P2C_ReportEnterUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P2C_ReportEnterUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.UserData user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P2C_ReportEnterUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.P2C_ReportEnterUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.UserData user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.P2C_ReportEnterUser)
  return target;
}

size_t P2C_ReportEnterUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.P2C_ReportEnterUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.UserData user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void P2C_ReportEnterUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.P2C_ReportEnterUser)
  GOOGLE_DCHECK_NE(&from, this);
  const P2C_ReportEnterUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<P2C_ReportEnterUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.P2C_ReportEnterUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.P2C_ReportEnterUser)
    MergeFrom(*source);
  }
}

void P2C_ReportEnterUser::MergeFrom(const P2C_ReportEnterUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.P2C_ReportEnterUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::Protocol::UserData::MergeFrom(from._internal_user());
  }
}

void P2C_ReportEnterUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.P2C_ReportEnterUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P2C_ReportEnterUser::CopyFrom(const P2C_ReportEnterUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.P2C_ReportEnterUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P2C_ReportEnterUser::IsInitialized() const {
  return true;
}

void P2C_ReportEnterUser::InternalSwap(P2C_ReportEnterUser* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata P2C_ReportEnterUser::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C2P_RequestLogin* Arena::CreateMaybeMessage< ::Protocol::C2P_RequestLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2P_RequestLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::P2C_ResultLogin* Arena::CreateMaybeMessage< ::Protocol::P2C_ResultLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::P2C_ResultLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2P_ReportMove* Arena::CreateMaybeMessage< ::Protocol::C2P_ReportMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2P_ReportMove >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::P2C_ReportMove* Arena::CreateMaybeMessage< ::Protocol::P2C_ReportMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::P2C_ReportMove >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2P_RequestCollison* Arena::CreateMaybeMessage< ::Protocol::C2P_RequestCollison >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2P_RequestCollison >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::P2C_ResultCollision* Arena::CreateMaybeMessage< ::Protocol::P2C_ResultCollision >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::P2C_ResultCollision >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::P2C_ReportUpdateMonsters* Arena::CreateMaybeMessage< ::Protocol::P2C_ReportUpdateMonsters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::P2C_ReportUpdateMonsters >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::P2C_ReportEnterUser* Arena::CreateMaybeMessage< ::Protocol::P2C_ReportEnterUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::P2C_ReportEnterUser >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
